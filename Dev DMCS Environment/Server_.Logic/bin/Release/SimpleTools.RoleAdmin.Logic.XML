<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SimpleTools.RoleAdmin.Logic</name>
    </assembly>
    <members>
        <member name="T:SimpleTools.RoleAdmin.Logic.ApplicationCollection`3">
            <summary>
            Provides the possibility to wrap SQL specific object to business logic object and collection.
            </summary>
            <typeparam name="TObject">Type of business object which must implement IApplicationObject interface.</typeparam>
            <typeparam name="TStore">Type of database object which must inherit from DbBase class.</typeparam>
            <typeparam name="TProcedure">Type of database command object which must inherit from SpBase class.</typeparam>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.ApplicationCollection`3.GetApplicationCollection(`2)">
            <summary>
            Executes SQL statement and wraps database objects to .NET collection. 
            </summary>
            <param name="Sp">Bussines logic command object instance.</param>
            <returns>Collection of bussines logic object instances.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.ApplicationCollection`3.GetApplicationObject(SimpleTools.RoleAdmin.Logic.Utilities.SpBase)">
            <summary>
            Executes SQL statement and wraps database object to .NET object. 
            </summary>
            <param name="Sp">Bussines logic command object instance.</param>
            <returns>Instance of bussines logic object.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.ApplicationCollection`3.FromJson``1(System.String)">
            <summary>
            Creates instance of class T from JSON string.
            </summary>
            <typeparam name="T">Class type.</typeparam>
            <param name="input">JSON representation of object.</param>
            <returns>Instance of class T</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.ApplicationCollection`3.ToJson(System.Object)">
            <summary>
            Creates JSON string from bussines object.
            </summary>
            <param name="input">Object instance.</param>
            <returns>JSON representation of an object.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.ApplicationCollection`3.JsonCollection(System.Collections.Generic.List{`0})">
            <summary>
            Creates JSON string from list of bussines objects.
            </summary>
            <param name="Object">Object collection.</param>
            <returns>JSON representation of object collection.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.ApplicationCollection`3.JsonItem(`0)">
            <summary>
            Creates JSON string from bussines object.
            </summary>
            <param name="Object">Object instance.</param>
            <returns>JSON representation of an object.</returns>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.ApplicationCollection`3.DatabaseProvider">
            <summary>
            Database server provider.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.ApplicationCollection`3.Table">
            <summary>
            Gets table name by collection type.
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.IApplicationObject">
            <summary>
            Provides mandatory interface for wrapped objects.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.IApplicationObject.Load(System.Data.IDataReader)">
            <summary>
            Loads bussines object properties from DataReader.
            </summary>
            <param name="dr">Valid instance of DataReader class.</param>
            <returns>True if all properties was read fine.</returns>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.ApplicationObject">
            <summary>
            Provides part of logic which wrapped object must inherit.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.ApplicationObject.IsValid">
            <summary>
            An object was read from database successfully flag;
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.ApplicationObject.WasSaved">
            <summary>
            An object was saved in database successfully flag;
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.ApplicationObject.WasDeleted">
            <summary>
            An object was deleted from database successfully flag;
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.ApplicationObject.UIMessage">
            <summary>
            Message for admin UI.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.ApplicationObject.UIMessageType">
            <summary>
            Message type for admin UI.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.ApplicationObject.UILineNumber">
            <summary>
            instance line number in collection.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.ApplicationObject.Table">
            <summary>
            The appropriate to object table name .
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.UIMessageType">
            <summary>
            Provides admin UI message types:
            Information;
            Success;
            Warning;
            ErrorOrDanger.
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.UIMessageType.Information">
            <summary>
            General infoamtion test.
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.UIMessageType.Success">
            <summary>
            An action was Successfully finished. 
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.UIMessageType.Warning">
            <summary>
            An action was finished but with warnings. 
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.UIMessageType.ErrorOrDanger">
            <summary>
            An action was failed. 
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.APIJson`1">
            <summary>
            Provides serializing objects to JSON string.
            </summary>
            <typeparam name="TObject"></typeparam>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.APIJson`1.Json(`0)">
            <summary>
            Gets JSON string. 
            </summary>
            <param name="Object">Object type.</param>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters">
            <summary>
            Provides the collection of the admin application parameters which are stored in the database.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.GetParam(System.String)">
            <summary>
            Gets application parameter by name.
            </summary>
            <param name="Name">Parameter name.</param>
            <returns>Insatnce of Parameter object.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.RefreshAppParameters">
            <summary>
            Reloads all application parametrs from the database.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.AppParameters">
            <summary>
            Gets application parameter collection which are kept in HTTP session. If it doesn't exist will be read from database.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.GeneralAdminEmail">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.GeneralDomainName">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.GeneralAuditEnabled">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.GeneralAppPath">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.GeneralCookieName">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.GeneralSecretAdminUrl">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.GeneralMaintenanceUrl">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.GeneralMaintenanceEnabled">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.ThemesCurrentName">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.RegistrationSelfRegistration">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.RegistrationSelfActivation">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.RegistrationResetPassword">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.RegistrationMemberRegistrationToRoles">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.RegistrationMemberActivationToRoles">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.RegistrationMailDomainRestriction">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.RegistrationMailDomainRestrictionList">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.RulesRedirectAfterLogin">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.RulesRedirectAfterLogout">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.RulesRedirectAfterSignUp">
            <summary> </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.RulesMailBcc">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.RulesMailBccRegistration">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.RulesMailBccActivation">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.RulesMailBccPasswordChange">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.RulesPasswordFailedRoles">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.RulesPasswordFailedAttempts">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.RulesPasswordFailedRedirect">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.MailServerSmtpHost">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.MailServerSmtpUser">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.MailServerSmtpEmail">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.MailServerSmtpPassword">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.MailServerSmtpPort">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.MailServerSmtpSSLEnabled">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.AppUIName">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.AppUiPagingSize">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.AppApiEnabled">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.AppApiSecretURL">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.AppFluid">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.LanguagePublicDefault">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.SocialTwitterEnabled">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.SocialTwitterConsumerKey">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.SocialTwitterConsumerSecret">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.SocialFacebookEnabled">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.SocialFacebookAppID">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.SocialFacebookAppSecret">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.SocialGooleEnabled">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.SocialYahooEnabled">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.SocialTwitterRoles">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.SocialFacebookRoles">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.SocialGoogleRoles">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.SocialYahooRoles">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.SocialLiveJournalEnabled">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.SocialLiveJournalRoles">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.SocialBloggerEnabled">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.SocialBloggerRoles">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.SocialOpenIDEnabled">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.SocialOpenIDRoles">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.SocialMyOpenIDEnabled">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.SocialMyOpenIDRoles">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.LDAPEnabled">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.LDAPAddRoleGroup">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.LDAPPath">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.LDAPAddToRoles">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.LDAPUseOnly">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.ApplicationParameters.LDAPDomain">
            <summary>/// </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.ApplicationTables">
            <summary>
            It supports wrapping database objects and keeps correspondence between the C# classes and database tables.
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.ApplicationTables._Names">
            <summary>
            Correspondence between the C# classes and database tables.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.ApplicationTables.TableName(System.Object)">
            <summary>
            Gets table name by class type.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.ApplicationTables.TableByTypeName(System.String)">
            <summary>
            Gets table name by type name.
            </summary>
            <param name="Name"></param>
            <returns></returns>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.ApplicationTables.Names">
            <summary>
            Gets Hashtable of correspondence between the C# classes and database tables.
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Collections.AppSession">
            <summary>
            Contains utility methods an properties whcih are used by admin appliaction.
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Collections.AppSession.PasswordMaxLength">
            <summary>
            Minimum password length.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.AppSession.GetAppVersion">
            <summary>
            Application version.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.AppSession.IsMemberInRole(System.String,System.Int64)">
            <summary>
            Gets true if logged member is in the role.
            </summary>
            <param name="RoleName">Role name.</param>
            <param name="MemberID">Member unique identifier.</param>
            <returns></returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.AppSession.ReloadLabels">
            <summary>
            Reloads all label files in which are in Labels folder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.AppSession.FindLanguage(System.String)">
            <summary>
            Return language key bu language code. 
            </summary>
            <param name="Code">Language code.</param>
            <returns>Language key.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.AppSession.GetLanguages">
            <summary>
            Gets list of loaded Language object instances.
            </summary>
            <returns>List of loaded Language object instances.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.AppSession.IsEmail(System.String)">
            <summary>
            Gets true if input email has correct format.
            </summary>
            <param name="inputEmail">Email address.</param>
            <returns>True if input email has correct format.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.AppSession.IsColor(System.String)">
            <summary>
            Gets true if input string has correct color format.
            </summary>
            <param name="Color">String representation of color, for instance aaffdd without # symbol.</param>
            <returns></returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.AppSession.isRealDomain(System.String)">
            <summary>
            Gets true if mal domain exists.
            </summary>
            <param name="inputEmail">Email address.</param>
            <returns>True if mal domain exists</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.AppSession.IsMailDomainAllowed(System.String)">
            <summary>
            Gets true if email domain is allowed for sing-up. You can change the list of allowed mail domain via admin UI.
            </summary>
            <param name="Email">E-mail address.</param>
            <returns>True if email domain is allowed for sing-up.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.AppSession.SendMail(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Send email to a recipient and BCC members.
            </summary>
            <param name="FromName">Sender name.</param>
            <param name="FromEmail">Sender email.</param>
            <param name="ToName">Recipient name.</param>
            <param name="ToEmail">Recipient email.</param>
            <param name="Bcc">BCC recipient emails.</param>
            <param name="Subject">Mail subject.</param>
            <param name="Body">Mail body.</param>
            <returns>True if an email has been sent succesfully.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.AppSession.GetLabel(System.String)">
            <summary>
            Gets label content by name using system language setting.  
            </summary>
            <param name="Name">Label name.</param>
            <returns></returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.AppSession.RefreshInvisibleCaptcha">
            <summary>
            Updates invisible captcha.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.AppSession.ValidateInvisibleCaptcha(System.String,System.String)">
            <summary>
            Validates invisible captcha.
            </summary>
            <param name="RequestID">Request calculated number.</param>
            <param name="SessionID">Session calculated number.</param>
            <returns></returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.AppSession.ToLocalTime(System.DateTime)">
            <summary>
            Converts UTC time to member's local time.
            </summary>
            <param name="Date">Member's UTC time.</param>
            <returns></returns>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.AppSession.EncryptionKey">
            <summary>
            Encryption key value
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.AppSession.AvatarImageSize">
            <summary>
            Avatart image size, for instance 100x100.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.AppSession.AppDomainAppVirtualPath">
            <summary>
            Application virtual directory path.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.AppSession.AvatarTempImage">
            <summary>
            Avatar temporary uploaded image. It keeps resized image of original. The maximum size is 640x480.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.AppSession.ReturnUrl">
            <summary>
            Return URL which are kept in the session object.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.AppSession.NoAuthReturnUrl">
            <summary>
            NoAuth ReturnUrl URL which are kept in the session object.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.AppSession.AppFacebookClient">
            <summary>
            Facebook application client
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.AppSession.Profile">
            <summary>
            Member profile which is kept in the session object.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.AppSession.IsMemberInAdminRole">
            <summary>
            Gets true if logged member is in the Amin role.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.AppSession.Parameters">
            <summary>
            Gets list of application parameters. 
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.AppSession.InvisibleCaptcha">
            <summary>
             Invisible captcha fro public forms.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.AppSession.SocialSignInIssueMessage">
            <summary>
            Keeps meaasge about SocialSignIn Issue
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.AppSession.SignUpDomain">
            <summary>
            Keeps new member SignUp domain.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.AppSession.SignInUrl">
            <summary>
            Keeps new member client site SignIn Url.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.AppSession.SignOut">
            <summary>
            Keeps new member SignOut.
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Collections.ActionTokens">
            <summary>
            Provides a possibility to get a token or collection of tokens which are connected with different type of action.
            For instance the activation process sends email notification with a token or password changing process.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.ActionTokens.GetBy(System.Int64)">
            <summary>
            Gets instance of ActionToken object by the token unique identifier.
            </summary>
            <param name="ActionID">Unique identifier of a token.</param>
            <returns>Instance of ActionToken object if it exists.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.ActionTokens.GetBy(System.String,SimpleTools.RoleAdmin.Logic.Objects.ActionTokenTypes)">
            <summary>
            Gets instance of ActionToke object by the token unique identifier and action type.
            </summary>
            <param name="Token">Unique identifier of token.</param>
            <param name="Type">Action type.</param>
            <returns>Instance of ActionToken object if it exists.</returns>
            ActionToken types:
            SelfActivation - means that the token will be used for activation purposes;
            PasswordReset  - means that the token will be used for changing password purposes.
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Collections.AuthMemberTickets">
            <summary>
            Provides the possibility to get single insatnce of AuthMemberToken object or collection of AuthMemberToken object instances.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.AuthMemberTickets.GetBy(System.Int64)">
            <summary>
            Gets AuthMemberToken object insatnce by unique identifier
            </summary>
            <param name="AuthMemberTokenID"></param>
            <returns>Insatnce of AuthMemberToken object.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.AuthMemberTickets.GetByMemberToken(System.Int64,System.String)">
            <summary>
            Gets AuthMemberToken object insatnce by member unique identifier and token.
            </summary>
            <param name="MemberID">Member unique identifier.</param>
            <param name="Token">Member's auth token.</param>
            <returns></returns>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Objects.SingInAuthTickets">
            <summary>
            SingInTickets structure for API using. We need this for correct json object for API.
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Collections.MemberDomains">
            <summary>
            Provides the possibility to get single insatnce of MemberDomain object or collection of MemberDomain object instances.
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Collections.MemberSocialNetworks">
            <summary>
            Provides the possibility to get single insatnce of MemberSocialNetwork object or collection of MemberSocialNetwork object instances.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.MemberSocialNetworks.GetBy(System.Int64)">
            <summary>
            Gets MemberSocialNetwork object insatnce by unique identifier
            </summary>
            <param name="MemberSocialNetworkID"></param>
            <returns>Insatnce of MemberSocialNetwork object.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.MemberSocialNetworks.GetByMemberID(System.Int64)">
            <summary>
            Gets MemberSocialNetwork object insatnce by unique identifier
            </summary>
            <param name="MemberID"></param>
            <returns>Insatnce of MemberSocialNetwork object.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.MemberSocialNetworks.Get">
            <summary>
            Gets collection of all MemberSocialNetwork in the database.
            </summary>
            <returns>List of MemberSocialNetwork object insatnces.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.MemberSocialNetworks.GetByMemberID(System.Int64,System.Int32,System.String)">
            <summary>
            Gets MemberSocialNetwork object insatnce by unique identifier, network, user id.
            </summary>
            <param name="MemberID">Member unique identifier.</param>
            <param name="SocialNetworkID">Social network unique identifier. 1 - Facebook, 2 - Twitter</param>
            <param name="SocialNetworkUserID">Social network unique identifier</param>
            <returns></returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.MemberSocialNetworks.GetBySignInEmail(System.String)">
            <summary>
            Gets MemberSocialNetwork object insatnce by sign in email.
            </summary>
            <param name="Email">Member signin email.</param>
            <returns>Insatnce of MemberSocialNetwork object.</returns>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Collections.DomainListFilter">
            <summary>
            Provides the fields to create the complex searching condition. 
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.DomainListFilter.ItemsPerPage">
            <summary>
            Items per page number
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.DomainListFilter.SortColumnName">
            <summary>
            Sorting column name.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.DomainListFilter.SortColumn">
            <summary>
            Sorting column number.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.DomainListFilter.SortOrderAsc">
            <summary>
            Order direction.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.DomainListFilter.CurrentPage">
            <summary>
            Current page number.
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Collections.Domains">
            <summary>
            Provides the possibility to get single insatnce of Domain object or collection of Domain object instances.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.Domains.GetBy(System.Int64)">
            <summary>
            Gets Domain object insatnce by unique identifier
            </summary>
            <param name="DomainID"></param>
            <returns>Insatnce of Domain object.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.Domains.GetByName(System.String)">
            <summary>
            Gets Domain object insatnce by name
            </summary>
            <param name="Name"></param>
            <returns>Insatnce of Domain object.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.Domains.Get">
            <summary>
            Gets collection of all Domains in the database.
            </summary>
            <returns>List of Domain object insatnces.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.Domains.GetFieldID(System.Int32)">
            <summary>
            Gets collection of field Domains in the database.
            </summary>
            <returns>List of Domain object insatnces.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.Domains.Get(SimpleTools.RoleAdmin.Logic.Collections.DomainListFilter,System.Int32@)">
            <summary>
            Return collection of Domain objects by a filter.
            </summary>
            <param name="Filter">The RoleListFilter includes: 
            ItemsPerPage - items number per page;
            SortColumnName - sorting column name;
            SortColumn - sorting column number;
            SortOrderAsc - sorting condition;
            CurrentPage - current page which calculated by total items and items per page;
            </param>
            <param name="TotalItems">It will contain total item number after method execution.</param>
            <returns>Total item number</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.Domains.GetByMember(System.Int64)">
            <summary>
            Gets collection of field Domains in the database.
            </summary>
            <returns>List of Domain object insatnces.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.Domains.GetByMember(System.Int64,System.String)">
            <summary>
            Gets collection of all MemberDomain in the database.
            </summary>
            <returns>List of language object insatnces.</returns>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Collections.ProfileFieldGroups">
            <summary>
            Provides the possibility to get an instance or instance collection of ProfileFieldGroup objects.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.ProfileFieldGroups.GetBy(System.Int32)">
            <summary>
            Gets instance of ProfileFieldGroup object by unique identifier.
            </summary>
            <param name="FieldGroupID">FieldGroup unique identifier.</param>
            <returns>Instance of ProfileFieldGroup object.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.ProfileFieldGroups.GetByName(System.String)">
            <summary>
            Gets list of MemberProfileField object instances by group name.
            </summary>
            <param name="FieldGroupName">Group name.</param>
            <returns>List of ProfileFieldGroup instances.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.ProfileFieldGroups.GetAll">
            <summary>
            Gets the list of all ProfileFieldGroup object instances.
            </summary>
            <returns>List of ProfileFieldGroup instances.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.ProfileFieldGroups.GetAllActive">
            <summary>
            Gets the list of all active ProfileFieldGroup object instances.
            </summary>
            <returns>List of ProfileFieldGroup instances.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.ProfileFieldGroups.GetAllActiveNonAdminByDomainRoleMember(System.Int64,System.String)">
            <summary>
            Gets the list of all active non admin ProfileFieldGroup object instances.
            </summary>
            <returns>List of ProfileFieldGroup instances.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.ProfileFieldGroups.UpdateOrder(System.String)">
            <summary>
            Updates the order of field according comma separated string param.
            </summary>
            <param name="Order">Comma separated unique identifiers.</param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.ProfileFieldGroups.GetAllByDomain(System.String)">
            <summary>
            Gets the list of all ProfileFieldGroup object instances by domain.
            </summary>
            <returns>List of ProfileFieldGroup instances.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.ProfileFieldGroups.GetAllByRole(System.String)">
            <summary>
            Gets the list of all ProfileFieldGroup object instances by role name.
            </summary>
            <returns>List of ProfileFieldGroup instances.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.ProfileFieldGroups.GetAllActiveNonAdminByDomain(System.String,System.String)">
            <summary>
            Gets the list of all ProfileFieldGroup object instances by domain.
            </summary>
            <returns>List of ProfileFieldGroup instances.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.ProfileFieldGroups.GetFilteredByDomainRoles(System.Int64)">
            <summary>
            Gets the list of all ProfileFieldGroup object instances.
            </summary>
            <returns>List of ProfileFieldGroup instances.</returns>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Collections.MemberProfileFields">
            <summary>
            Provides the possibility to get an instance or instance collection of MemberProfileField objects.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.MemberProfileFields.GetBy(System.Int64)">
            <summary>
            Gets instance of Members Attempt object by unique identifier.
            </summary>
            <param name="ProfileFieldID">Field unique identifier.</param>
            <returns>Instance of MemberProfileField object.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.MemberProfileFields.GetByMember(System.Int64)">
            <summary>
            Gets list of MemberProfileField object instances by member unique identifier.
            </summary>
            <param name="MemberID">Member unique identifier.</param>
            <returns>List of MemberProfileField object insatnces.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.MemberProfileFields.GetField(System.Collections.Generic.List{SimpleTools.RoleAdmin.Logic.Objects.MemberProfileField},System.Int32)">
            <summary>
            Searches MemberProfileField object in the list by field unique identifier.
            </summary>
            <param name="List">List of MemberProfileField objetcs.</param>
            <param name="FieldID">Field unique identifier.</param>
            <returns></returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.MemberProfileFields.GetField(System.Collections.Generic.List{SimpleTools.RoleAdmin.Logic.Objects.MemberProfileField},System.String)">
            <summary>
            Searches MemberProfileField object in the list by field name.
            </summary>
            <param name="List">List of MemberProfileField objetcs.</param>
            <param name="FieldName">Field name.</param>
            <returns></returns>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Collections.ProfileFieldTypes">
            <summary>
            Provides the possibility to get an instance or instance collection of ProfileFieldType objects.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.ProfileFieldTypes.Get(System.Int32)">
            <summary>
            Gets instance of ProfileFieldType object by unique identifier.
            </summary>
            <param name="FieldTypeID">FieldType unique identifie.r</param>
            <returns>Instance of ProfileFieldType object.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.ProfileFieldTypes.Get">
            <summary>
            Gets the list of all ProfileFieldTyp object instances.
            </summary>
            <returns>Instance of ProfileFieldType object.</returns>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Collections.ProfileFields">
            <summary>
            Provides the possibility to get an instance or instance collection of ProfileField objects.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.ProfileFields.GetBy(System.Int32)">
            <summary>
            Gets instance of ProfileField object by unique identifier.
            </summary>
            <param name="FieldID">Field unique identifier.</param>
            <returns>Instance of ProfileField object.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.ProfileFields.GetSignUp">
            <summary>
            Gets instance list of ProfileField object which are available for sign-up process.
            </summary>
            <returns>List of ProfileField instances</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.ProfileFields.GetSignUpActiveNonAdminByGroup(System.String)">
            <summary>
            Gets instance list of ProfileField object which are available for sign-up process by group.
            </summary>
            <param name="FieldGroupName">Field group name.</param>
            <returns>List of ProfileField instances</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.ProfileFields.GetByGroupName(System.String)">
            <summary>
            Gets instance list of ProfileField object by group name.
            </summary>
            <param name="FieldGroupName">Field group name.</param>
            <returns>List of ProfileField instances.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.ProfileFields.GetByGroupID(System.Int32)">
            <summary>
            Gets instance list of ProfileField object by group unique identifier.
            </summary>
            <param name="FieldGroupID">Field group unique identifier.</param>
            <returns>List of ProfileField instances</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.ProfileFields.GetByDomainGroupID(System.String,System.Int32)">
            <summary>
            Gets instance list of ProfileField object by group unique identifier and domain name.
            </summary>
            <param name="FieldGroupID">Field group unique identifier.</param>
            <param name="DomainName">DomainName.</param>
            <returns>List of ProfileField instances</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.ProfileFields.GetByRoleGroupID(System.String,System.Int32)">
            <summary>
            Gets instance list of ProfileField object by group unique identifier and role name.
            </summary>
            <param name="RoleName">Role name.</param>
            <param name="FieldGroupID">Field group unique identifier</param>
            <returns>List of ProfileField instances</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.ProfileFields.GetByDomainRoleGroupID(System.Int64,System.String,System.Int32)">
            <summary>
            Gets instance list of ProfileField object by group unique identifier, member unique identifier, domain name.
            </summary>
            <param name="MemberID">Member unique identifier</param>
            <param name="DomainName">Domain name</param>
            <param name="FieldGroupID">Group unique identifier</param>
            <returns></returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.ProfileFields.GetAll">
            <summary>
            Gets the list of all profile fields in the database.
            </summary>
            <returns>List of all profile fields.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.ProfileFields.GetByName(System.String)">
            <summary>
            Gets profile field by field name.
            </summary>
            <param name="FieldName">Profile field name.</param>
            <returns></returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.ProfileFields.UpdateOrder(System.String,System.Int32)">
            <summary>
            Updates the order of field groups according comma separated string param.
            </summary>
            <param name="Order">Comma separated unique identifiers.</param>
            <param name="GroupID">Target group unique identifier</param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.ProfileFields.GetByDomain(System.Int32)">
            <summary>
            Returns the collection of profile fields which are attached to specific domain.
            </summary>
            <param name="DomainID">Domain ID.</param>
            <returns>Collection of profile fields</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.ProfileFields.GetByRole(System.Int64)">
            <summary>
            Returns the collection of profile fields which are attached to specific role.
            </summary>
            <param name="RoleID">Role ID.</param>
            <returns>Collection of profile fields</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.ProfileFields.SetIsActive(System.Boolean,System.Int32)">
            <summary>
            Set IsActive field flag.
            </summary>
            <param name="Flag">True or False.</param>
            <param name="FieldID">Profile field unique identifier.</param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.ProfileFields.SetAdminUseOnly(System.Boolean,System.Int32)">
            <summary>
            Set AdminUseOnly field flag.
            </summary>
            <param name="Flag">True or False.</param>
            <param name="FieldID">Profile field unique identifier.</param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.ProfileFields.SetShowInSignUp(System.Boolean,System.Int32)">
            <summary>
            Set ShowInSignUp field flag.
            </summary>
            <param name="Flag">True or False.</param>
            <param name="FieldID">Profile field unique identifier.</param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.ProfileFields.GetByRoleDomainGroupID(System.Int32,System.Int64)">
            <summary>
            Gets instance list of ProfileField object by group unique identifier.
            </summary>
            <param name="FieldGroupID">Field group unique identifier.</param>
            <param name="MemberID">Member unique identifier.</param>
            <returns>List of ProfileField instances</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.ProfileFields.GetSignUpActiveNonAdminByDomainGroup(System.Int32,System.String,System.String)">
            <summary>
            Gets instance list of ProfileField object which are available for sign-up process by group.
            </summary>
            <param name="FieldGroupID">Field group unique identifier.</param>
            <param name="DomainName">Domain name.</param>
            <param name="RoleName">Role name.</param>
            <returns>List of ProfileField instances</returns>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Collections.MemberAttempts">
            <summary>
            Provides the possibility to get an instance or instance collection of MemberAttempt objects.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.MemberAttempts.GetValid(System.Int64,System.DateTime,SimpleTools.RoleAdmin.Logic.Objects.MemberAttemptTypes)">
            <summary>
            Gets valid instance of Members Attempt object for specific date, member and type.
            </summary>
            <param name="MemberID">Member unique identifier number.</param>
            <param name="Date">Date</param>
            <param name="AttemptType">Type of attempt.</param>
            <returns>Insatnce of MemberAttempt objects.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.MemberAttempts.Get(System.Int64,SimpleTools.RoleAdmin.Logic.Objects.MemberAttemptTypes)">
            <summary>
            Gets instance of Members Attempt object for specific member and type.
            </summary>
            <param name="MemberID">Member unique identifier number.</param>
            <param name="AttemptType">Type of attempt.</param>
            <returns>List of MemberAttempt objects.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.MemberAttempts.Get(System.Int64)">
            <summary>
            Gets all MemberAttempt instances by member unique identifier.
            </summary>
            <param name="MemberID">Member unique identifier.</param>
            <returns>c</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.MemberAttempts.GetTodayLoginPasswordFail(System.Int64)">
            <summary>
             Returns valid instance of MemberAttempt object for specific member and date.
            </summary>
            <param name="MemberID">Member unique identifier number.</param>
            <returns>Insatnce of MemberAttempt object.</returns>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Collections.MemberTokens">
            <summary>
            Provides the possibility to get an instance or instance collection of MemberTokens objects. This type of token will be used for API requests.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.MemberTokens.GetByMember(System.Int64)">
            <summary>
            Return instance of MemberToken object by token member unique identifier.
            </summary>
            <param name="MemberID">Member unique identifier.</param>
            <returns>Instance of MemberToken object.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.MemberTokens.GetByToken(System.String)">
            <summary>
            Return instance of MemberToken object by token string.
            </summary>
            <param name="Token">Token string.</param>
            <returns>Instance of MemberToken object.</returns>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Collections.MemberListFilter">
            <summary>
            Provides the fields to create complex searching condition. 
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.MemberListFilter.#ctor">
            <summary>
            The class constructor.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.MemberListFilter.ItemsPerPage">
            <summary>
            Items per page number.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.MemberListFilter.SortColumnName">
            <summary>
            Sorting column name.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.MemberListFilter.SortColumn">
            <summary>
            Sorting column number.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.MemberListFilter.SortOrderAsc">
            <summary>
            Order direction.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.MemberListFilter.AlphabetFilter">
            <summary>
            List of alphabet indexes.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.MemberListFilter.RolesFilter">
            <summary>
            List of role unique identifiers.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.MemberListFilter.CurrentPage">
            <summary>
            Current page number.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.MemberListFilter.RoleFilterCondition">
            <summary>
            Searching join condition. 
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.MemberListFilter.Search">
            <summary>
            Set of words for searching.
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Collections.MemberListFilterRoleConditon">
            <summary>
            Provides searching join condition. 
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Collections.MemberListFilterRoleConditon.OR">
            <summary>
            Join condition by OR. 
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Collections.MemberListFilterRoleConditon.AND">
            <summary>
            Join condition by AND.
            </summary>        
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Collections.Members">
            <summary>
            Provides the possibility to get an instance or the collection of Member objects by specified condition from the database. For instance: you can get a member by e-mail address or unique identifier.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.Members.GetBy(System.Int64)">
            <summary>
            Gets an instance of Member object by unique identifier.
            </summary>
            <param name="MemberID">Member unique identifier.</param>
            <returns>Insatnce of Member object.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.Members.Get">
            <summary>
            Gets all instances of Member object from the database.
            </summary>
            <returns>List of Member instances.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.Members.Get(SimpleTools.RoleAdmin.Logic.Collections.MemberListFilter,System.Int32@)">
            <summary>
            Return collection of Member objects by a filter.
            </summary>
            <param name="Filter">The MemberListFilter includes: 
            ItemsPerPage - items number per page;
            SortColumnName - sorting column name;
            SortColumn - sorting column number;
            SortOrderAsc - sorting condition;
            AlphabetFilter - List of alphabet indexes
            RolesFilter - List of role unique identifiers.
            CurrentPage - current page which calculated by total items  and items per page;
            Search - Set of words for searching.
            </param>
            <param name="TotalItems">It will contain total item number after method execution.</param>
            <returns>List of Member instances.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.Members.GetByEmail(System.String)">
            <summary>
            Return an instance of Member objects by member email.
            </summary>
            <param name="email">Member email.</param>
            <returns>Insatnce of Member object.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.Members.GetByEmailOrName(System.String,System.String)">
            <summary>
            Return an instance of Member objects by member email or name.
            </summary>
            <param name="email">Member email.</param>
            <param name="name">Member name.</param>
            <returns>Insatnce of Member object.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.Members.GetByEmailName(System.String,System.String)">
            <summary>
            Return an instance of Member objects by member email and name.
            </summary>
            <param name="email">Member email.</param>
            <param name="name">Member name.</param>
            <returns>Insatnce of Member object.</returns>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Collections.Parameters">
            <summary>
            Provides the possibility to get an instance or instance collection of Parameter objects. 
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.Parameters.GetBy(System.Int64)">
            <summary>
            Gets instance of Parameter object by the parameter unique identifier.
            </summary>
            <param name="ID">Parameter unique identifier</param>
            <returns>Instance of Parameter object if it exists.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.Parameters.GetBy(System.String)">
            <summary>
            Gets instance of Parameter object by the parameter unique name.
            </summary>
            <param name="Name">Parameter unique name.</param>
            <returns>Instance of Parameter object if it exists.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.Parameters.Get">
            <summary>
            Gets the list of all Parameter object instances.
            </summary>
            <returns>List of all Parameter objects in the database. </returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.Parameters.GetParameter(System.Collections.Generic.List{SimpleTools.RoleAdmin.Logic.Objects.Parameter},System.String)">
            <summary>
            Searches MemberProfileField object in the list by field unique identifier.
            </summary>
            <param name="List">List of MemberProfileField objetcs.</param>
            <param name="Name">Field name.</param>
            <returns>Instance of Parameter object if it exists.</returns>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Collections.Languages">
            <summary>
            Provides the possibility to get single insatnce of language object or collection of Language object instances.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.Languages.GetBy(System.Int64)">
            <summary>
            Gets Language object insatnce by unique identifier
            </summary>
            <param name="LanguageID"></param>
            <returns>Insatnce of Language object.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.Languages.Get">
            <summary>
            Gets collection of all languages in the database.
            </summary>
            <returns>List of language object insatnces.</returns>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Collections.RoleListFilter">
            <summary>
            Provides the fields to create the complex searching condition. 
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.RoleListFilter.ItemsPerPage">
            <summary>
            Items per page number
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.RoleListFilter.SortColumnName">
            <summary>
            Sorting column name.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.RoleListFilter.SortColumn">
            <summary>
            Sorting column number.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.RoleListFilter.SortOrderAsc">
            <summary>
            Order direction.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.RoleListFilter.CurrentPage">
            <summary>
            Current page number.
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Collections.Roles">
            <summary>
            It provides a possibility to get an instance or instance collection of Role objects.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.Roles.Get">
            <summary>
            Gets all instances of Member object from the database.
            </summary>
            <returns>List of Role instances.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.Roles.GetBy(System.Int64)">
            <summary>
            Gets an instance of Role object by unique identifier.
            </summary>
            <param name="RoleID">Role unique identifier.</param>
            <returns>Insatnce of Role object.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.Roles.GetMemberCount(System.Int64)">
            <summary>
            Gets member count for specific role.
            </summary>
            <param name="RoleID">Role unique identifie.</param>
            <returns>Member count number.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.Roles.GetBy(System.String)">
            <summary>
            Gets member count by role name.
            </summary>
            <param name="Name">Role name.</param>
            <returns>Insatnce of Role object.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.Roles.Get(SimpleTools.RoleAdmin.Logic.Collections.RoleListFilter,System.Int32@)">
            <summary>
            Return collection of Role objects by a filter.
            </summary>
            <param name="Filter">The RoleListFilter includes: 
            ItemsPerPage - items number per page;
            SortColumnName - sorting column name;
            SortColumn - sorting column number;
            SortOrderAsc - sorting condition;
            CurrentPage - current page which calculated by total items and items per page;
            </param>
            <param name="TotalItems">It will contain total item number after method execution.</param>
            <returns>Total item number</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.Roles.GetByMember(System.Int64)">
            <summary>
            Return collection of Role object for specific member.
            </summary>
            <param name="MemberID">Member role unique identifie</param>
            <returns>List of Role instances.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.Roles.GetByMemberNotIn(System.Int64)">
            <summary>
            Return collection of Role object which specific member doesn't have.
            </summary>
            <param name="MemberID">Member unique identifie.</param>
            <returns>List of Role instances.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.Roles.GetByMemberKeyWordInDescription(System.Int64,System.String)">
            <summary>
            Return collection of Role object for specific member and key word in description.
            </summary>
            <param name="MemberID">Member unique identifie.</param>
            <param name="Keyword">Keyword in the description.</param>
            <returns>List of Role instances.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.Roles.GetFieldID(System.Int32)">
            <summary>
            Gets collection of field Roles in the database.
            </summary>
            <returns>List of Role object insatnces.</returns>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Collections.AuditEventListFilter">
            <summary>
            Provides fields to create complex searching condition 
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.AuditEventListFilter.#ctor">
            <summary>
            The class constructor.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.AuditEventListFilter.ItemsPerPage">
            <summary>
            Items per page number.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.AuditEventListFilter.SortColumnName">
            <summary>
            Sorting column name.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.AuditEventListFilter.SortColumn">
            <summary>
            Sorting column number.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.AuditEventListFilter.SortOrderAsc">
            <summary>
            Order direction .
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.AuditEventListFilter.CurrentPage">
            <summary>
            Current page number.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.AuditEventListFilter.Search">
            <summary>
            Set of words for searching.
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Collections.AuditEventListFilterRoleConditon">
            <summary>
            Provides searching join condition. 
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Collections.AuditEventListFilterRoleConditon.OR">
            <summary>
            Join condition by OR.
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Collections.AuditEventListFilterRoleConditon.AND">
            <summary>
            Join condition by AND.
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Collections.AuditEvents">
            <summary>
            Provides a possibility to get an instance or instance collection of AuditEvent objects.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.AuditEvents.RemoveAll">
            <summary>
            Removes all audit event items from the database by one request. 
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.AuditEvents.GetBy(System.Int64)">
            <summary>
            Gets an instance of AuditEvent object by unique identifier.
            </summary>
            <param name="EventID">Event unique identifier</param>
            <returns>Insatnce of AuditEvent object.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.AuditEvents.Get">
            <summary>
            Return collection of all audit event objects in the database.
            </summary>
            <returns>List of AuditEvent objects.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.AuditEvents.Get(SimpleTools.RoleAdmin.Logic.Collections.AuditEventListFilter,System.Int32@)">
            <summary>
            Return collection of AuditEvent objects by a filter.
            </summary>
            <param name="Filter">The AuditEventListFilter includes: 
            ItemsPerPage - items number per page;
            SortColumnName - sorting column name;
            SortColumn - sorting column number;
            SortOrderAsc - sorting condition;
            CurrentPage - current page which calculated by total items  and items per page;
            Search - Set of words for searching.
            </param>
            <param name="TotalItems">It will contain total items number after method execution</param>
            <returns>List of AuditEvent instances.</returns>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Objects.SocialSignInAvailabilities">
            <summary>
            Social SignIn Availability structure for API using. We need this for correct json object for API.
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Collections.MemberProfile">
            <summary>
            Conatins methods an properties which are connected with session member profile management in the admn application.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.MemberProfile.#ctor">
            <summary>
            The class constructor.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.MemberProfile.#ctor(SimpleTools.RoleAdmin.Logic.Objects.Member)">
            <summary>
            The class constructor.
            </summary>
            <param name="Member">Member object.</param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Collections.MemberProfile.IsInRole(System.String)">
            <summary>
            Gets true if the member is in specific role.
            </summary>
            <param name="Name">Role name.</param>
            <returns>True if the member is in specific role.</returns>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.MemberProfile.Member">
            <summary>
            A session member.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.MemberProfile.Language">
            <summary>
            A member default languga.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.MemberProfile.Roles">
            <summary>
            List of member roles.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.MemberProfile.IsInRoleAdmin">
            <summary>
            True if the member is in admin role.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.MemberProfile.IsInRoleBlocked">
            <summary>
            True if the member was blocked.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Collections.MemberProfile.CurrentProfile">
            <summary>
            Logged member profile object.
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Objects.AuthMemberTicket">
            <summary>
            Provides a wrapper on single row in the ActionTokens database table. The properties of this class mapped on appropriate database fields and methods provide saving and loading into/from database.
            An instance of this class can be created by new word or loaded from the database using ActionTokens class which returns collection of AuthMemberTicket objects by different condition.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.AuthMemberTicket.#ctor">
            <summary>
            The class constructor.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.AuthMemberTicket.#ctor(System.Data.IDataReader)">
            <summary>
            Creates AuthMemberTicketobject which is base on result set field values.
            </summary>
            <param name="dr">DataReader object which represents current row in the resultset.</param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.AuthMemberTicket.Load(System.Data.IDataReader)">
            <summary>
            Loads result set field values and saves into properties of class.
            </summary>
            <param name="dr">DataReader object which represents current row in the resultset.</param>
            <returns>Returns true if it was successfully loaded.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.AuthMemberTicket.Save">
            <summary>
            Inserts an object in database according to class properties. It depends on AuthMemberTicketID property.
            </summary>
            <returns>Returns true if it was successfully saved.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.AuthMemberTicket.Delete">
            <summary>
            Deletes an object from the database.
            </summary>
            <returns>Returns true if it was successfully deleted</returns>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuthMemberTicket.AuthMemberTicketID">
            <summary>
            Unique identifier in the database.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuthMemberTicket.MemberID">
            <summary>
            Member unique identifier in the database.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuthMemberTicket.IssueDate">
            <summary>
            Ticket issue date.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuthMemberTicket.Expiration">
            <summary>
            Ticket expiration date.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuthMemberTicket.IsPersistent">
            <summary>
            Is ticket persistent flag.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuthMemberTicket.Token">
            <summary>
            Random symbols and numbers string which is in lower and upper case.
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Objects.SingInAuthTicket">
            <summary>
            Social SingInAuthTicket structure for API using. 
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.SingInAuthTicket.Load(System.Data.IDataReader)">
            <summary>
            Creates  SingInAuthTicket object which is base on result set field values.
            </summary>
            <param name="dr">DataReader object which represents current row in the resultset.</param>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.SingInAuthTicket.MemberID">
            <summary>
            Member unique item identifier.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.SingInAuthTicket.MemberName">
            <summary>
            Member name.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.SingInAuthTicket.MemberEmail">
            <summary>
            Member email.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.SingInAuthTicket.EncrytedTicket">
            <summary>
            Encryted ticket string.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.SingInAuthTicket.IsPersistant">
            <summary>
            Cookie persistant flag.
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Objects.SocialSignInAvailability">
            <summary>
            Social SignIn Availability structure for API using. 
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.SocialSignInAvailability.Load(System.Data.IDataReader)">
            <summary>
            Creates Social SignIn Availability object which is base on result set field values.
            </summary>
            <param name="dr">DataReader object which represents current row in the resultset.</param>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.SocialSignInAvailability.Twitter">
            <summary>
            Is Twitter singin switched on
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.SocialSignInAvailability.Facebook">
            <summary>
            Is Facebook singin switched on
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.SocialSignInAvailability.Google">
            <summary>
            Is Google singin switched on
            </summary>        
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.SocialSignInAvailability.Yahoo">
            <summary>
            Is Yahoo singin switched on
            </summary>        
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.SocialSignInAvailability.LiveJournal">
            <summary>
            Is LiveJournal singin switched on
            </summary>        
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.SocialSignInAvailability.Blogger">
            <summary>
            Is Blogger singin switched on
            </summary>        
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.SocialSignInAvailability.OpenID">
            <summary>
            Is OpenID singin switched on
            </summary>        
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.SocialSignInAvailability.myOpenID">
            <summary>
            Is myOpenID singin switched on
            </summary>        
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Objects.MemberDomain">
            <summary>
            Business logic part. Can be used for extra logic which operates by not SQL specific objects.
            </summary>
            <summary>
            Database read/write part.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.MemberDomain.#ctor">
            <summary>
            The class constructor.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.MemberDomain.#ctor(System.Data.IDataReader)">
            <summary>
            Creates MemberDomain object which is base on result set field values.
            </summary>
            <param name="dr">DataReader object which represents current row in the resultset.</param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.MemberDomain.Load(System.Data.IDataReader)">
            <summary>
            Loads result set field values and saves into properties of class.
            </summary>
            <param name="dr">DataReader object which represents current row in the resultset.</param>
            <returns>Returns true if it was successfully loaded.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.MemberDomain.Save">
            <summary>
            Inserts an object in database according to class properties.
            </summary>
            <returns>Returns true if it was successfully saved.</returns>            
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.MemberDomain.Delete">
            <summary>
            Deletes an object from the database.
            </summary>
            <returns>Returns true if it was successfully deleted.</returns>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.MemberDomain.MemberDomainID">
            <summary>
            Unique item identifier in the database.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.MemberDomain.DomainID">
            <summary>
            Domain unique identifier in the database.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.MemberDomain.MemberID">
            <summary>
            Member unique identifier in the database.
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Objects.MemberSocialNetwork">
            <summary>
            Provides a wrapper on single row in the MemberSocialNetworks database table. The properties of this class mapped on appropriate database fields and methods provide saving and loading into/from database.
            An instance of this class can be created by new word or loaded from the database using MemberSocialNetworks class which returns collection of MemberSocialNetwork objects by different condition.
            </summary>    
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.MemberSocialNetwork.#ctor">
            <summary>
            The class constructor.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.MemberSocialNetwork.#ctor(System.Data.IDataReader)">
            <summary>
            Creates MemberSocialNetwork object which is base on result set field values.
            </summary>
            <param name="dr">DataReader object which represents current row in the resultset.</param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.MemberSocialNetwork.Load(System.Data.IDataReader)">
            <summary>
            Loads result set field values and saves into properties of class.
            </summary>
            <param name="dr">DataReader object which represents current row in the resultset.</param>
            <returns>Returns true if it was successfully loaded.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.MemberSocialNetwork.Save">
            <summary>
            Inserts an object in database according to class properties.
            </summary>
            <returns>Returns true if it was successfully saved.</returns>            
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.MemberSocialNetwork.Delete">
            <summary>
            Deletes an object from the database.
            </summary>
            <returns>Returns true if it was successfully deleted.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.MemberSocialNetwork.DeleteAll">
            <summary>
            Deletes all roles from the database which are connected with specific member.
            </summary>
            <returns>Returns true if it was successfully deleted.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.MemberSocialNetwork.UpdateAccessToken">
            <summary>
            Updates access token.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.MemberSocialNetwork.MemberSocialNetworkID">
            <summary>
            Unique item identifier in the database.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.MemberSocialNetwork.MemberID">
            <summary>
            Member unique identifier in the database.
            </summary>        
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.MemberSocialNetwork.SocialNetworkID">
            <summary>
            Social network unique identifier. 1 - Facebook, 2 - Twitter 
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.MemberSocialNetwork.SocialNetworkUserID">
            <summary>
            Unique user identifier in the a social network.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.MemberSocialNetwork.SocialNetworkUserEmail">
            <summary>
            User email for the a social network login.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.MemberSocialNetwork.SocialNetworkUserName">
            <summary>
            User name for the a social network login.
            </summary>        
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.MemberSocialNetwork.AccessToken">
            <summary>
            User access token  for the a social network login.
            </summary>        
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Objects.RoleProfileField">
            <summary>
            Business logic part. Can be used for extra logic which operates by not SQL specific objects.
            </summary>
            <summary>
            Database read/write part.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.RoleProfileField.#ctor">
            <summary>
            The class constructor.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.RoleProfileField.#ctor(System.Data.IDataReader)">
            <summary>
            Creates RoleProfileField object which is base on result set field values.
            </summary>
            <param name="dr">DataReader object which represents current row in the resultset.</param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.RoleProfileField.Load(System.Data.IDataReader)">
            <summary>
            Loads result set field values and saves into properties of class.
            </summary>
            <param name="dr">DataReader object which represents current row in the resultset.</param>
            <returns>Returns true if it was successfully loaded.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.RoleProfileField.Save">
            <summary>
            Inserts an object in database according to class properties.
            </summary>
            <returns>Returns true if it was successfully saved.</returns>            
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.RoleProfileField.Delete">
            <summary>
            Deletes an object from the database.
            </summary>
            <returns>Returns true if it was successfully deleted.</returns>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.RoleProfileField.RoleFieldID">
            <summary>
            Unique item identifier in the database.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.RoleProfileField.RoleID">
            <summary>
            Role unique identifier in the database.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.RoleProfileField.ProfileFieldID">
            <summary>
            Field unique identifier in the database.
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Objects.DomainProfileField">
            <summary>
            Business logic part. Can be used for extra logic which operates by not SQL specific objects.
            </summary>
            <summary>
            Database read/write part.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.DomainProfileField.#ctor">
            <summary>
            The class constructor.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.DomainProfileField.#ctor(System.Data.IDataReader)">
            <summary>
            Creates DomainProfileField object which is base on result set field values.
            </summary>
            <param name="dr">DataReader object which represents current row in the resultset.</param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.DomainProfileField.Load(System.Data.IDataReader)">
            <summary>
            Loads result set field values and saves into properties of class.
            </summary>
            <param name="dr">DataReader object which represents current row in the resultset.</param>
            <returns>Returns true if it was successfully loaded.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.DomainProfileField.Save">
            <summary>
            Inserts an object in database according to class properties.
            </summary>
            <returns>Returns true if it was successfully saved.</returns>            
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.DomainProfileField.Delete">
            <summary>
            Deletes an object from the database.
            </summary>
            <returns>Returns true if it was successfully deleted.</returns>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.DomainProfileField.DomainFieldID">
            <summary>
            Unique item identifier in the database.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.DomainProfileField.DomainID">
            <summary>
            Domain unique identifier in the database.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.DomainProfileField.ProfileFieldID">
            <summary>
            Field unique identifier in the database.
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Objects.Domain">
            <summary>
            Provides a wrapper on single item in the Domains database table. The properties of this class mapped on appropriate database fields and methods provide saving and loading into/from database.
            An instance of this class can be created by new word or loaded from a database using Domains class which returns collection of Domain by different condition.  
            </summary>    
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.Domain.#ctor">
            <summary>
            The class constructor
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.Domain.Load(System.Data.IDataReader)">
            <summary>
            Loads result set field values and saves into properties of class.
            </summary>
            <param name="dr">DataReader object which represents current row in the resultset.</param>
            <returns>Returns true if it was successfully loaded.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.Domain.Save">
            <summary>
            Inserts an object in database according to class properties.
            </summary>
            <returns>Returns true if it was successfully saved.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.Domain.Delete">
            <summary>
            Deletes all roles from the database which are connected with specific member.
            </summary>
            <returns>Returns true if it was successfully deleted.</returns>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.Domain.DomainID">
            <summary>
            Unique item identifier in the database.
            </summary>    	
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.Domain.Name">
            <summary>
            Application name.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.Domain.Description">
            <summary>
            Application description.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.Domain.IsActive">
            <summary>
            Application activity flag.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.Domain.Created">
            <summary>
            Date of creation.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.Domain.Modified">
            <summary>
            Date of modification.
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Objects.MemberProfileField">
            <summary>
            Business logic part. Can be used for extra logic which operates by not SQL specific objects.
            </summary>
            <summary>
            Database read/write part.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.MemberProfileField.#ctor">
            <summary>
            The class constructor.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.MemberProfileField.#ctor(System.Data.IDataReader)">
            <summary>
            Creates MemberProfileField object which is base on result set field values.
            </summary>
            <param name="dr">DataReader object which represents current row in the resultset.</param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.MemberProfileField.Load(System.Data.IDataReader)">
            <summary>
            Loads result set field values and saves into properties of class.
            </summary>
            <param name="dr">DataReader object which represents current row in the resultset.</param>
            <returns>Returns true if it was successfully loaded.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.MemberProfileField.Save">
            <summary>
            Inserts an object in database according to class properties.
            </summary>
            <returns>Returns true if it was successfully saved.</returns>            
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.MemberProfileField.Delete">
            <summary>
            Deletes an object from the database.
            </summary>
            <returns>Returns true if it was successfully deleted.</returns>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.MemberProfileField.ProfileFieldID">
            <summary>
            Unique item identifier in the database.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.MemberProfileField.MemberID">
            <summary>
            Member unique identifier in the database.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.MemberProfileField.FieldID">
            <summary>
            Field unique identifier in the database.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.MemberProfileField.FieldName">
            <summary>
            Field name.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.MemberProfileField.FieldValue">
            <summary>
            Member field value.
            </summary>        
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.MemberProfileField.Created">
            <summary>
            Date of creation.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.MemberProfileField.Modified">
            <summary>
            Date of modification.
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Objects.ProfileFieldGroup">
            <summary>
            Provides a wrapper on single item in the ProfileFieldGroups database table. The properties of this class mapped on appropriate database fields and methods provide saving and loading into/from database.
            An instance of this class can be created by new word or loaded from a database using ProfileFieldGroups class which returns collection of ProfileFieldGroup by different condition.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.ProfileFieldGroup.#ctor">
            <summary>
            The class constructor.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.ProfileFieldGroup.#ctor(System.Data.IDataReader)">
            <summary>
            Creates ProfileFieldGroup object which is base on result set field values.
            </summary>
            <param name="dr">DataReader object which represents current row in the resultset.</param>        
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.ProfileFieldGroup.Load(System.Data.IDataReader)">
            <summary>
            Loads result set field values and saves into properties of class.
            </summary>
            <param name="dr">DataReader object which represents current row in the resultset.</param>
            <returns>Returns true if it was successfully loaded.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.ProfileFieldGroup.Save">
            <summary>
            Inserts or updates an object in database according to class properties.
            </summary>
            <returns>Returns true if it was successfully saved.</returns>            
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.ProfileFieldGroup.Delete">
            <summary>
            Deletes an object from the database.
            </summary>
            <returns>Returns true if it was successfully deleted.</returns>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.ProfileFieldGroup.FieldGroupID">
            <summary>
            Unique item identifier in the database.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.ProfileFieldGroup.FieldGroupDescription">
            <summary>
            Dield group description.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.ProfileFieldGroup.FieldGroupName">
            <summary>
            Field group name.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.ProfileFieldGroup.OrderID">
            <summary>
            OrderID number.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.ProfileFieldGroup.IsActive">
            <summary>
            Meaning: Do members see this group on the profile page
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.ProfileFieldGroup.AdminUseOnly">
            <summary>
            Only admin members will see the group if this property is true
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Objects.ProfileFieldType">
            <summary>
            Provides a wrapper on single item in the ProfileFieldTypes database table. The properties of this class mapped on appropriate database fields and methods provide saving and loading into/from database.
            An instance of this class can be created by new word or loaded from a database using ProfileFieldTypes class which returns collection of ProfileFieldType by different condition.
            </summary>    
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.ProfileFieldType.#ctor">
            <summary>
            The class constructor.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.ProfileFieldType.#ctor(System.Data.IDataReader)">
            <summary>
            Creates ProfileFieldGroup object which is base on result set field values.
            </summary>
            <param name="dr">DataReader object which represents current row in the resultset.</param>        
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.ProfileFieldType.Load(System.Data.IDataReader)">
            <summary>
            Loads result set field values and saves into properties of class.
            </summary>
            <param name="dr">DataReader object which represents current row in the resultset.</param>
            <returns>Returns true if it was successfully loaded.</returns>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.ProfileFieldType.FieldTypeID">
            <summary>
            Unique item identifier in the database.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.ProfileFieldType.FieldTypeName">
            <summary>
            Field type name.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.ProfileFieldType.FieldTypeDescription">
            <summary>
            Field type description.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.ProfileFieldType.FieldTypeSize">
            <summary>
            Field type size.
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Objects.ProfileFieldTypeEnum">
            <summary>
            Parameter type. Possible values are:
            String - string 32 chars;
            StringMultiline - string 64 chars;
            Number - integer number;
            ListSingleSelect - integer number;
            ListMultiSelect - integer number.
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Objects.ProfileFieldTypeEnum.String">
            <summary>
            The value is string.
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Objects.ProfileFieldTypeEnum.StringMultiline">
            <summary>
            The value is multilen string.
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Objects.ProfileFieldTypeEnum.Number">
            <summary>
            The value is number
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Objects.ProfileFieldTypeEnum.ListSingleSelect">
            <summary>
            The value is string from the list.
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Objects.ProfileFieldTypeEnum.ListMultiSelect">
            <summary>
            The value is string array from the list.
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Objects.ProfileFieldTypeEnum.CheckBox">
            <summary>
            The value is true or false.
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Objects.ProfileFieldTypeEnum.Radio">
            <summary>
            The value is string from the list.
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Objects.ProfileFieldTypeEnum.ComboBox">
            <summary>
            The value is string from the combobox list.
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Objects.ProfileField">
            <summary>
            Provides a wrapper on single item in the ProfileFields database table. The properties of this class mapped on appropriate database fields and methods provide saving and loading into/from database.
            An instance of this class can be created by new word or loaded from a database using ProfileFields class which returns collection of ProfileField by different condition.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.ProfileField.#ctor">
            <summary>
            The class constructor.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.ProfileField.#ctor(System.Data.IDataReader)">
            <summary>
            Creates ProfileField object which is base on result set field values.
            </summary>
            <param name="dr">DataReader object which represents current row in the resultset.</param>        
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.ProfileField.Load(System.Data.IDataReader)">
            <summary>
            Loads result set field values and saves into properties of class.
            </summary>
            <param name="dr">DataReader object which represents current row in the resultset.</param>
            <returns>Returns true if it was successfully loaded.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.ProfileField.Save">
            <summary>
            Inserts or updates an object in database according to class properties.
            </summary>
            <returns>Returns true if it was successfully saved.</returns>            
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.ProfileField.Delete">
            <summary>
            Deletes an object from the database.
            </summary>
            <returns>Returns true if it was successfully deleted.</returns>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.ProfileField.FieldID">
            <summary>
            Unique item identifier in the database.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.ProfileField.FieldTypeID">
            <summary>
            Parameter type. Possible values are:
            String - string 32 chars;
            StringMultiline - string 64 chars;
            Number - integer number;
            ListSingleSelect - integer number;
            ListMultiSelect - integer number.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.ProfileField.FieldName">
            <summary>
            Fiels name.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.ProfileField.Comment">
            <summary>
            Field comment.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.ProfileField.PossibleValues">
            <summary>
            The list of possible values (comma separated string).
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.ProfileField.TextSelectValue">
            <summary>
            Select value text for drop-dwon list. 
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.ProfileField.IsMandatory">
            <summary>
            Mandatory flag.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.ProfileField.ShowInSignUp">
            <summary>
            The field will be shown in sign-in form.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.ProfileField.FieldGroupID">
            <summary>
            Field group unique identifier.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.ProfileField.OrderID">
            <summary>
            Order number.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.ProfileField.SortValues">
            <summary>
            Sort possible value in the list.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.ProfileField.IsActive">
            <summary>
            If field is active show field for the member.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.ProfileField.AdminUseOnly">
            <summary>
            Show the fiedl fro admin member only.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.ProfileField.VerticalLayout">
            <summary>
            User vertical layout for radio button group and checkboxes.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.ProfileField.Encrypted">
            <summary>
            If you set this flag the field value will be stored encrypted in the database.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.ProfileField.Created">
            <summary>
            Date of creation.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.ProfileField.Modified">
            <summary>
            Date of modification.
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Objects.MemberAttemptTypes">
            <summary>
            Attempt action type. 
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Objects.MemberAttemptTypes.LoginPasswordFailed">
            <summary>
            Password failed attempt type.
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Objects.MemberAttempt">
            <summary>
            Provides a wrapper on single row in the MemberAttempts database table. The properties of this class mapped on appropriate database fields and methods provide saving and loading into/from database.
            An instance of this class can be created by new word or loaded from the database using MemberAttempts class which returns collection of MemberAttempt objects by different condition.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.MemberAttempt.#ctor">
            <summary>
            The class constructor.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.MemberAttempt.#ctor(System.Data.IDataReader)">
            <summary>
            Creates ActionToken object which is base on result set field values.
            </summary>
            <param name="dr">DataReader object which represents current row in the resultset.</param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.MemberAttempt.SaveAttempts">
            <summary>
            Save attempt number for specific type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.MemberAttempt.Load(System.Data.IDataReader)">
            <summary>
            Loads result set field values and saves into properties of class.
            </summary>
            <param name="dr">DataReader object which represents current row in the resultset.</param>
            <returns>Returns true if it was successfully loaded.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.MemberAttempt.Save">
            <summary>
            Inserts an object in database according to class properties.
            </summary>
            <returns>Returns true if it was successfully saved.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.MemberAttempt.Delete">
            <summary>
            Deletes an object from the database.
            </summary>
            <returns>Returns true if it was successfully deleted</returns>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.MemberAttempt.AttemptID">
            <summary>
            Unique item identifier in the database.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.MemberAttempt.MemberID">
            <summary>
            Member unique identifier in the database.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.MemberAttempt.Attempts">
            <summary>
            Number of attempts.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.MemberAttempt.IsAttemptValid">
            <summary>
            Last Attempt status: if it is true in this case last attempt was successful.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.MemberAttempt.AttemptType">
            <summary>
            Attempt action type.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.MemberAttempt.Created">
            <summary>
            Date of attempt item creation.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.MemberAttempt.Modified">
            <summary>
            Date of attempt item modification.
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Objects.MemberToken">
            <summary>
            Provides a wrapper on single item in the MemberTokens database table. The properties of this class mapped on appropriate database fields and methods provide saving and loading into/from database.
            An instance of this class can be created by new word or loaded from a database using MemberTokens class which returns collection of MemberToken by different condition.  
            </summary>    
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.MemberToken.#ctor">
            <summary>
            The class constructor.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.MemberToken.#ctor(System.Data.IDataReader)">
            <summary>
            Creates MemberToken object which is base on result set field values.
            </summary>
            <param name="dr">DataReader object which represents current row in the resultset.</param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.MemberToken.SaveToken">
            <summary>
            Updates member token string and set modification date.
            </summary>
            <returns>Returns true if it was successfully deleted.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.MemberToken.Load(System.Data.IDataReader)">
            <summary>
            Loads result set field values and saves into properties of class.
            </summary>
            <param name="dr">DataReader object which represents current row in the resultset.</param>
            <returns>Returns true if it was successfully loaded.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.MemberToken.Save">
            <summary>
            Inserts an object in database according to class properties.
            </summary>
            <returns>Returns true if it was successfully saved.</returns>            
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.MemberToken.Delete">
            <summary>
            Deletes all roles from the database which are connected with specific member.
            </summary>
            <returns>Returns true if it was successfully deleted.</returns>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.MemberToken.MemberTokenID">
            <summary>
            Unique item identifier in the database.
            </summary>        
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.MemberToken.MemberID">
            <summary>
            Member unique identifier in the database.
            </summary>        
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.MemberToken.Token">
            <summary>
            Member token string.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.MemberToken.GeneratedBy">
            <summary>
            Email of the token creator.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.MemberToken.Created">
            <summary>
            Date of item creation.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.MemberToken.Modified">
            <summary>
            Date of modification.
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.SpRoleAdmin">
            <summary>
            Contains methods which help to execute SQL statements or stored procedures for connected database. 
            This is small class which inherit from SpBase class and can be used as a template. If you need to execute SQL commands 
            from another database. You have a possibility execute as simple or complex SQL statements from one side 
            and Stored procedures from another side by the same class.
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Utilities.SpBase">
            <summary>
            Provides a wrapper for using SQL Stored Procedures and Commands.
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.DB">
            <summary>
            DbBase object.
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.RequestType">
            <summary>
            DbBase object.
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.m_ProcedureName">
            <summary>
            Parameterized SQL statement or strored procedure name.
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.m_SqlConnection">
            <summary>
            SQL connection object.
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.m_SqlCommand">
            <summary>
            SQL command object.
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.m_HashParameters">
            <summary>
            Parameters name value hash table.
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.m_SqlDataAdapter">
            <summary>
            SQL adapter object.
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.m_SqlDataReader">
            <summary>
            SQL reader object.
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.m_strConnection">
            <summary>
            Connetion string value.
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.m_Dataset">
            <summary>
            DataSet object
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.m_DataView">
            <summary>
            DataView object.
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.blnError">
            <summary>
            True if an error happened.
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.strErrorMessage">
            <summary>
            Error message string an error happened or emty string.
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.CommandTimeOut">
            <summary>
            Timeout (in seconds) for sql command.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.#ctor">
            <summary>
            Empty Constructor.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.#ctor(System.String,System.String)">
            <summary>
            Constructor. Needs a procedure name
            </summary>
            <param name="strConnection">Connection string.</param>
            <param name="ProcedureName">Stored procedure name or parameterized SQL statement.</param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.#ctor(System.String)">
            <summary>
            Constructor. Needs a procedure name.
            </summary>
            <param name="ProcedureName">Stored procedure name or parameterized SQL statement.</param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.#ctor(System.String,System.String,System.Collections.Hashtable)">
            <summary>
            Constructor. Needs a procedure name and a hashtable containing the parameters
            </summary>
            <param name="strConnection">Connection string.</param>
            <param name="ProcedureName">Stored procedure name or parameterized SQL statement.</param>
            <param name="HashParameters">Parameters hash table.</param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.#ctor(System.String,System.Collections.Hashtable)">
            <summary>
            Constructor. Needs a procedure name and a hashtable containing the parameters
            </summary>
            <param name="ProcedureName">Stored procedure name or parameterized SQL statement.</param>
            <param name="HashParameters">Parameters hash table.</param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.#ctor(System.String,System.String,System.String,System.Object)">
            <summary>
            Constructor. Needs a procedure name and key/value set as Parameters
            </summary>
            <param name="strConnection">Connection string.</param>
            <param name="ProcedureName">Stored procedure name or parameterized SQL statement.</param>
            <param name="ParameterName">Parameter name.</param>
            <param name="ParameterValue">Parameter value.</param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.#ctor(System.String,System.String,System.Object)">
            <summary>
            Constructor. Needs a procedure name and key/value set as Parameters.
            </summary>
            <param name="ProcedureName">Stored procedure name or parameterized SQL statement.</param>
            <param name="ParameterName">Parameter name.</param>
            <param name="ParameterValue">Parameter value.</param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.AddParameter">
            <summary>
            Creates a SqlParameter, no properties set
            </summary>
            <returns></returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.AddParameter(System.String,System.Object)">
            <summary>
            Add a parameter (parameter name, parameter value)
            </summary>
            <param name="ParameterName">Parameter name.</param>
            <param name="ParameterValue">Parameter value.</param>
            <returns></returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.GetParameter(System.String)">
            <summary>
            Gets parameter object by name.
            </summary>
            <param name="ParameterName"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.AddParameter(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            Add a parameter (parameter name, parameter value, parameter direction)
            </summary>
            <param name="ParameterName">Parameter name.</param>
            <param name="ParameterValue">Parameter value.</param>
            <param name="paramDirection">Direction: Input, Output, InputOutput.</param>
            <returns></returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.AddParameter(System.String,System.Object,System.Data.ParameterDirection,System.Data.DbType)">
            <summary>
            Add a parameter (parameter name, parameter value, parameter direction, parameter sqldbtype)
            </summary>
            <param name="ParameterName">Parameter name.</param>
            <param name="ParameterValue">Parameter value.</param>
            <param name="paramDirection">Direction: Input, Output, InputOutput.</param>
            <param name="paramSqlDbType">Parameter SQL type.</param>
            <returns></returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.AddParameter(System.String,System.Object,System.Data.ParameterDirection,System.Data.DbType,System.Int32)">
            <summary>
            Add a parameter (parameter name, parameter value, parameter direction, parameter sqldbtype, int paramSize)
            </summary>
            <param name="ParameterName">Parameter name.</param>
            <param name="ParameterValue">Parameter value.</param>
            <param name="paramDirection">Direction: Input, Output, InputOutput.</param>
            <param name="paramSqlDbType">Parameter SQL type.</param>
            <param name="intSize">Parameter size.</param>
            <returns></returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.AddParameter(System.String,System.Data.ParameterDirection,System.Data.DbType)">
            <summary>
            Add a parameter (ParameterName, paramDirection, paramSqlDbType)
            </summary>
            <param name="ParameterName">Parameter name.</param>
            <param name="paramDirection">Direction: Input, Output, InputOutput.</param>
            <param name="paramSqlDbType">Parameter SQL type.</param>
            <returns></returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.AddParameter(System.String,System.Data.ParameterDirection,System.Data.DbType,System.Int32)">
            <summary>
            Add a parameter (ParameterName, paramDirection, paramSqlDbType, intSize)
            </summary>
            <param name="ParameterName">Parameter name.</param>
            <param name="paramDirection">Direction: Input, Output, InputOutput.</param>
            <param name="paramSqlDbType">Parameter SQL type.</param>
            <param name="intSize">Parameter size.</param>
            <returns></returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.AddParameter(System.String,System.Data.ParameterDirection,System.Data.DbType,System.Int32,System.Int32,System.Int32)">
            <summary>
            Add a parameter ( ParameterName, paramDirection, paramSqlDbType, intSize, intPrecision, intScale)
            </summary>
            <param name="ParameterName">Parameter name.</param>
            <param name="paramDirection">Direction: Input, Output, InputOutput.</param>
            <param name="paramSqlDbType">Parameter SQL type.</param>
            <param name="intSize">Parameter size.</param>
            <param name="intPrecision"></param>
            <param name="intScale"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.AddParameter(System.String,System.Data.ParameterDirection,System.Data.DbType,System.Int32,System.Int32)">
            <summary>
            Add a parameter ( ParameterName, paramDirection, paramSqlDbType, intPrecision, intScale).
            </summary>
            <param name="ParameterName">Parameter name.</param>
            <param name="paramDirection">Direction: Input, Output, InputOutput.</param>
            <param name="paramSqlDbType">Parameter SQL type.</param>
            <param name="intPrecision"></param>
            <param name="intScale"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.Close">
            <summary>
            Closes the connection.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.ExecuteNonQuery">
            <summary>
            Executes a command in non-query mode.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.ExecuteDataAdapter">
            <summary>
            Executes a command returning a SqlDataAdapter. The connection has to be closed!
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.ExecuteScalar">
            <summary>
            Executes a command in scalar mode.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.ExecuteXMLReader">
            <summary>
            Executes a command returning a XML Reader.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.ExecuteDataSet(System.String)">
            <summary>
            Executes a command returning a DataSet.
            </summary>
            <param name="strTablename">Table name.</param>
            <returns>Result DataSte object.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.ExecuteDataView(System.String)">
            <summary>
            Executes a command returning a DataView.
            </summary>
            <param name="strTablename">Tabel name.</param>
            <returns>Result DataView object.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.ExecuteReader">
            <summary>
            Executes a command returning a SqlDataReader. The SqlDataReader has to be closed!
            </summary>
            <returns>SqlDataReader object.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.ParameterValue(System.String)">
            <summary>
            Gets  the value of a parameter.
            </summary>
            <param name="ParameterName">Parameter name.</param>
            <returns>Object value.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.Init">
            <summary>
            Does the basic job of initialising the db stuff (connection, command) and adding the parameters
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.Init(SimpleTools.RoleAdmin.Logic.Utilities.DbBaseRequestType,SimpleTools.RoleAdmin.Logic.Utilities.DatabaseProvider)">
            <summary>
            Does the basic job of initialising the db stuff (connection, command) and adding the parameters
            </summary>
            <param name="RequestType">Parameterized SQL text or stored procedure.</param>
            <param name="DatabaseProvider">Database server provider</param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.CleanKey(System.String)">
            <summary>
            Gets a key string, without preceding '@'.
            </summary>
            <param name="ParameterName">Parameter name.</param>
            <returns></returns>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.DatabaseProvider">
            <summary>
            Source database provider.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.SqlConnection">
            <summary>
            Gets  the Sql connection
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.Procedurename">
            <summary>
            Gets  / sets the stored procedure name
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.SqlCommand">
            <summary>
            Gets  the SqlCommand
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.SqlDataAdapter">
            <summary>
            Gets  the SqlDataAdapter
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.SqlDataReader">
            <summary>
            Gets  the SqlDataReader
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.DataSet">
            <summary>
            Gets  the dataset
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.DataView">
            <summary>
            Gets  the dataset
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.Parameters">
            <summary>
            Gets  / sets the parameters hashtable
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.ConnectionString">
            <summary>
            Gets  / sets the parameters hashtable
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.IsError">
            <summary>
            Gets the error setting (true is there was an error)
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Utilities.SpBase.ErrorMessage">
            <summary>
            Gets the last error message, if any.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.SpRoleAdmin.#ctor(System.String)">
            <summary>
            The class constructor.
            </summary>
            <param name="ProcedureName">Stored procedure name or parameterized SQL statement.</param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.SpRoleAdmin.#ctor(System.String,SimpleTools.RoleAdmin.Logic.Utilities.DbBaseRequestType)">
            <summary>
            The class constructor.
            </summary>
            <param name="ProcedureName">Stored procedure name or parameterized SQL statement.</param>
            <param name="RequestType">The request type stored procedure name or parameterized SQL.</param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.SpRoleAdmin.#ctor(System.String,System.Collections.Hashtable)">
            <summary>
            The class constructor.
            </summary>
            <param name="ProcedureName">Stored procedure name or parameterized SQL statement.</param>
            <param name="HashParameters">Parameters hash table.</param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.SpRoleAdmin.#ctor(System.String,System.String,System.Object)">
            <summary>
            The class constructor.
            </summary>
            <param name="ProcedureName">The class constructor.</param>
            <param name="ParameterName">Parameter name.</param>
            <param name="ParameterValue">Parameter value.</param>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.StringTool">
            <summary>
            Represents class for using custom string utility methods.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.StringTool.DeleteLines(System.String,System.Int32)">
            <summary>
            Deletes some lines from the source string.
            </summary>
            <param name="s">Source string</param>
            <param name="linesToRemove">Number lines to remove.</param>
            <returns>String with removed N lines</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.StringTool.Truncate(System.String,System.Int32)">
            <summary>
            Get a substring of the first N characters.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.StringTool.Encrypt(System.String)">
            <summary>
            Encrypt string by machine key.
            </summary>
            <param name="plaintextValue">The string for encryption.</param>
            <returns>Encrypted string.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.StringTool.Decrypt(System.String)">
            <summary>
            Decrypt string by machine key.
            </summary>
            <param name="encryptedValue">The string for decryption.</param>
            <returns>Decrypted string.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.StringTool.Truncate2(System.String,System.Int32)">
            <summary>
            Get a substring of the first N characters. [Slow]
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.StringTool.RandomString(System.Int32,System.Boolean)">
            <summary>
            Return random string by specific length.
            </summary>
            <param name="length">String length.</param>
            <param name="NumbersOnly">Numbers only flag.</param>
            <returns>String with specified length.</returns>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.LDAPMemberInfo">
            <summary>
            LDAP Directory member info.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.LDAPMemberInfo.DisplayName">
            <summary>
            Member display name.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.LDAPMemberInfo.Email">
            <summary>
            Member email.
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.LDAPTools">
            <summary>
            Provides different methods to manipulate LDAP directory objects.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.LDAPTools.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.LDAPTools.Authenticate">
            <summary>
            Authenticates a member in LDAP directory.
            </summary>
            <returns>True if Aathentication was fine.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.LDAPTools.GetMemberInfo">
            <summary>
            Returns LDAP member info which are stored in the directory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.LDAPTools.GetGroups">
            <summary>
            Returns LDAP directory member groups divided by | symbol.
            </summary>
            <returns>Member groups string divided by | symbol.</returns>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.LDAPTools.UserName">
            <summary>
            LDAP user name.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.LDAPTools.Password">
            <summary>
            LDAP user password.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.LDAPTools.DirectoryPath">
            <summary>
            LDAP DIrectory path.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.LDAPTools.MemberInfo">
            <summary>
            LDAP directory member info.
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.AuthMemberToken">
            <summary>
             Provides security token information.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.AuthMemberToken.MemberID">
            <summary>
            Member unique item identifier.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.AuthMemberToken.MemberName">
            <summary>
            Member name.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.AuthMemberToken.MemberEmail">
            <summary>
            Member e-mail
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.AuthMemberToken.Token">
            <summary>
            Session unique item identifier.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.AuthMemberToken.Domain">
            <summary>
            Application domain.
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.ActionValidationResult">
            <summary>
            Validation result class.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.ActionValidationResult.Load(System.Data.IDataReader)">
            <summary>
            Creates ValidationResult object which is base on result set field values.
            </summary>
            <param name="dr">DataReader object which represents current row in the resultset.</param>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.ActionValidationResult.IsValid">
            <summary>
            Validation result flag.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.ActionValidationResult.Expiration">
            <summary>
            Expiration Date. 
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.ActionValidationResults">
            <summary>
            Social ValidationResult structure for API using. We need this for correct json object for API.
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Objects.AuditEventType">
            <summary>
            Audit event type possible values:
            Default - the type of action can't be defined;
            Info - if something not realy important happened;
            Success - if an acction finished succesfylly;
            Warning - needs to pay attantion to an action;
            Error - an error occurred during an action.
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Objects.AuditEventType.Default">
            <summary>
            General type of audit item.
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Objects.AuditEventType.Info">
            <summary>
            Information type of audit item.
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Objects.AuditEventType.Success">
            <summary>
            An ction was finished fine type.
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Objects.AuditEventType.Warning">
            <summary>
            An action was finished with warnings.
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Objects.AuditEventType.Error">
            <summary>
            An action was failed.
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Objects.AuditEventSource">
            <summary>
            App - an action is connected with application activity;
            System - an action is connected with system activity;
            API - an action is connected with API call;
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Objects.AuditEventSource.App">
            <summary>
            The event source is admin application.
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Objects.AuditEventSource.System">
            <summary>
            The source is process in a library.
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Objects.AuditEventSource.API">
            <summary>
            The source is application API.
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Objects.AuditEventItem">
            <summary>
            Provides a wrapper on single row in the AuditEventItems database table. The properties of this class mapped on appropriate database fields and methods provide saving and loading into/from database.
            An instance of this class can be created by new word or loaded from the database using AuditEventItems class which returns collection of AuditEventItem objects by different condition.    
            Keeps information about single action details: session cookies, server variables, client IP address etc.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEventItem.EventType">
            <summary>
            Event type, can be:
            Default - the type of action can't be defined;
            Info - if something not realy important happened;
            Success - if an acction finished succesfylly;
            Warning - needs to pay attantion to an action;
            Error - an error occurred during an action.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEventItem.MemberEmail">
            <summary>
            Email of executor.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEventItem.IPAddress">
            <summary>
            IP address of executor.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEventItem.Details">
            <summary>
            An acction short description.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEventItem.Description">
            <summary>
            An action long description.
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Objects.AuditEventItemDetail">
             <summary>
            Provides information about single action in details which happens during application activity. 
             </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.AuditEventItemDetail.Load(System.Data.IDataReader)">
            <summary>
            Needs to be implemented in order to use application collection methods. 
            </summary>
            <param name="dr">DataReader object.</param>
            <returns>False</returns>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEventItemDetail.Title">
            <summary>
            An action short description.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEventItemDetail.Description">
            <summary>
            An action long description.
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Objects.AuditEventItemDetails">
            Provides a wrapper on single row in the AuditEventItems database table. The properties of this class mapped on appropriate database fields and methods provide saving and loading into/from database.
            An instance of this class can be created by new word or loaded from the database using AuditEventItems class which returns collection of AuditEventItem objects by different condition.    
            Keeps information about single action in details which happens during application activity.
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent">
            <summary>
            Provides a wrapper on single row in the AuditEventItems database table. The properties of this class mapped on appropriate database fields and methods provide saving and loading into/from database.
            An instance of this class can be created by new word or loaded from the database using AuditEventItems class which returns collection of AuditEventItem objects by different condition.    
            Keeps information about single action which happens during application activity. There are the types of event: system, application, API.
            </summary>
            <summary>
            Database read/write part.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.GetIPAddress">
            <summary>
            Gets user host address. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.IsAduitEnabled">
            <summary>
            Gets audit feature state: on or off.
            </summary>
            <returns>True if the aduit feature is enabled. </returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.AppEventInfo(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Adds audit event item with type Info. 
            </summary>
            <param name="MemberEmail">Email of executor.</param>
            <param name="Description">Event short description.</param>
            <param name="Details">Event long description in details.</param>
            <param name="NoMatterIfAuditEnabled">Add audit item even this feature is switched off.</param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.AppEventSuccess(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Adds audit event item with type Success. 
            </summary>
            <param name="MemberEmail">Email of executor.</param>
            <param name="Description">Event short description.</param>
            <param name="Details">Event long description in details.</param>
            <param name="NoMatterIfAuditEnabled">Add audit item even this feature is switched off.</param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.AppEventWarning(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Adds audit event item with type Warning.
            </summary>
            <param name="MemberEmail">Email of executor.</param>
            <param name="Description">Event short description.</param>
            <param name="Details">Event long description in details.</param>
            <param name="NoMatterIfAuditEnabled">Add audit item even this feature is switched off.</param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.AppEventError(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Adds audit event item with type Warning.
            </summary>
            <param name="MemberEmail"></param>
            <param name="Description"></param>
            <param name="Details"></param>
            <param name="NoMatterIfAuditEnabled"></param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.AddAppEvent(SimpleTools.RoleAdmin.Logic.Objects.AuditEventItem)">
            <summary>
            Adds audit event item with source Application.
            </summary>
            <param name="EventItem">EventItem which describes an action.</param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.AddSystemEvent(SimpleTools.RoleAdmin.Logic.Objects.AuditEventItem)">
            <summary>
            Adds audit event item with source System.
            </summary>
            <param name="EventItem">EventItem which describes an action.</param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.AddAPIEvent(SimpleTools.RoleAdmin.Logic.Objects.AuditEventItem)">
            <summary>
            Adds audit event item with source API.
            </summary>
            <param name="EventItem">EventItem which describes an action.</param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.AddEvent(SimpleTools.RoleAdmin.Logic.Objects.AuditEventSource,SimpleTools.RoleAdmin.Logic.Objects.AuditEventItem)">
            <summary>
            Adds audit event item with predefined source.
            </summary>
            <param name="Source">
            App - an acction is conneted with application ativity logic;
            System - an acction is conneted with system ativity logic;
            API - an acction is conneted with API call;
            </param>
            <param name="EventItem">EventItem which describes an action.</param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.GetSessionDetails(System.String)">
            <summary>
            Return HTTP session details from current HTTP context. 
            </summary>
            <param name="Details">Additional text which will be includded in the result string.</param>
            <returns></returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.GetAuditEventDetails(SimpleTools.RoleAdmin.Logic.Objects.AuditEvent)">
            <summary>
            Gets collection of audit event items by AuditEvent object.
            </summary>
            <param name="AuditEvent">Audit event item without details.</param>
            <returns></returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.#ctor">
            <summary>
            The class constructor.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.#ctor(System.Data.IDataReader)">
            <summary>
            Creates AuditEvent object which is base on result set field values.
            </summary>
            <param name="dr">DataReader object which represents current row in the resultset.</param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.Load(System.Data.IDataReader)">
            <summary>
            Loads result set field values and saves into properties of class.
            </summary>
            <param name="dr">DataReader object which represents current row in the resultset.</param>
            <returns>Returns true if it was successfully loaded.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.Save">
            <summary>
            Inserts an object in database according to class properties.
            </summary>
            <returns>Returns true if it was successfully saved.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.Delete">
            <summary>
            Deletes an object from the database.
            </summary>
            <returns>Returns true if it was successfully deleted.</returns>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.MemberLoggedIn">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.MemberWrongEmail">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.MemberWrongPassword">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.SavingMemberInfo">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.MemberAssigToRole">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.MemberRemovedFromRole">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.MemberRemovedFromAllRole">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.MemberNoRemovedAdminFromRole">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.MemberDounloaded">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.MemberUploaded">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.MemberUploadHasStarted">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.MemberUploadedItemAdded">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.MemberUploadMemberExists">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.MemberUploadWrongLineFormat">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.MemberUploadHasFineshed">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.SentRandomPasswordBadFormat">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.SentRandomPasswordNotExist">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.SentRandomPasswordSent">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.RoleContainsMembers">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.RoleIsBuiltIn">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.RoleDeleted">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.RoleDounloaded">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.RoleUploaded">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.RoleUploadHasStarted">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.RoleUploadedItemAdded">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.RoleUploadMemberExists">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.RoleUploadWrongLineFormat">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.RoleUploadHasFineshed">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.AccountNotActivated">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.AccountAccountBlocked">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.AccountWrongUser">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.AccountWronAdmingUserLink">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.AccountWrongEmail">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.AccountDomainNotAllowed">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.AccountAccountExists">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.AccountActivationMailSent">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.AccountWrongActiveLink">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.AccountActivated">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.AccountAccountDoesntExist">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.AccountResetPassMail">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.AccountWrongResetPassLink">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.AccountPassChanged">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.TheEmailhasBeenSent">
            <summary></summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.EventID">
            <summary>
            Unique item identifier in the database.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.EventType">
            <summary>
            Type of the item.
            Audit event type possible values:
            Default - the type of action can't be defined;
            Info - if something not realy important happened;
            Success - if an acction finished succesfylly;
            Warning - needs to pay attantion to an action;
            Error - an error occurred during an action.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.EventSource">
            <summary>
            Source of the item.
            App - an acction is conneted with application ativity logic;
            System - an acction is conneted with system ativity logic;
            API - an acction is conneted with API call;
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.Description">
            <summary>
            Event short description.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.MemberEmail">
            <summary>
            Email of an executor.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.Details">
            <summary>
            Event description in details.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.IPAddress">
            <summary>
            IP Address of an executor.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.AuditEvent.Created">
            <summary>
            Date of creation.
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Objects.ActionTokenTypes">
            <summary>
            Token type
            SelfActivation - means that the token will be used for activation purposes,
            PasswordReset  - means that the token will be used for changing password purposes.
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Objects.ActionTokenTypes.SelfActivation">
            <summary>
            The token will be used for activation purposes.
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Objects.ActionTokenTypes.PasswordReset">
            <summary>
            The token will be used for changing password purposes.
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Objects.ActionToken">
            <summary>
            Provides a wrapper on single row in the ActionTokens database table. The properties of this class mapped on appropriate database fields and methods provide saving and loading into/from database.
            An instance of this class can be created by new word or loaded from the database using ActionTokens class which returns collection of ActionToken objects by different condition.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.ActionToken.#ctor">
            <summary>
            The class constructor.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.ActionToken.#ctor(System.Data.IDataReader)">
            <summary>
            Creates ActionToken object which is base on result set field values.
            </summary>
            <param name="dr">DataReader object which represents current row in the resultset.</param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.ActionToken.Load(System.Data.IDataReader)">
            <summary>
            Loads result set field values and saves into properties of class.
            </summary>
            <param name="dr">DataReader object which represents current row in the resultset.</param>
            <returns>Returns true if it was successfully loaded.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.ActionToken.Save">
            <summary>
            Inserts an object in database according to class properties. It depends on ActionID property.
            </summary>
            <returns>Returns true if it was successfully saved.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.ActionToken.Delete">
            <summary>
            Deletes an object from the database.
            </summary>
            <returns>Returns true if it was successfully deleted</returns>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.ActionToken.ActionID">
            <summary>
            Unique identifier in the database.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.ActionToken.ActionType">
            <summary>
            Type of action token. 
            Here is the list of possible values:
            SelfActivation - means that the token will be used for activation purposes,
            PasswordReset  - means that the token will be used for changing password purposes.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.ActionToken.Token">
            <summary>
            Random symbols and numbers string which is in lower and upper case.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.ActionToken.Email">
            <summary>
            Token's owner email.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.ActionToken.Created">
            <summary>
            Creation date time in UTC format.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.ActionToken.ReturnURL">
            <summary>
            Rediration URL which is used after token processing.
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Objects.ParameterType">
            <summary>
            Parameter type. Possible values are:
            ShortString - string 32 cahrs
            LongString - string 2048 cahrs
            SmallInteger - integer number
            Bool - true or false
            RadioInteger - integer
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Objects.ParameterType.ShortString">
            <summary>
            String 32 cahrs.
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Objects.ParameterType.LongString">
            <summary>
            string 2048 cahrs.
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Objects.ParameterType.SmallInteger">
            <summary>
            integer number.
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Objects.ParameterType.Bool">
            <summary>
            true or false.
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Objects.ParameterType.RadioInteger">
            <summary>
            integer.
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Objects.Parameter">
            <summary>
            Provides a wrapper on single item in the Parameters database table. The properties of this class mapped on appropriate database fields and methods provide saving and loading into/from database.
            An instance of this class can be created by new word or loaded from a database using Parameters class which returns collection of Parameter by different condition. 
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.Parameter.#ctor">
            <summary>
            The class constructor.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.Parameter.#ctor(System.Data.IDataReader)">
            <summary>
            Creates Parameter object which is base on result set field values.
            </summary>
            <param name="dr">DataReader object which represents current row in the resultset.</param>        
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.Parameter.Load(System.Data.IDataReader)">
            <summary>
            Loads result set field values and saves into properties of class.
            </summary>
            <param name="dr">DataReader object which represents current row in the resultset.</param>
            <returns>Returns true if it was successfully loaded.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.Parameter.Save">
            <summary>
            Inserts an object in database according to class properties.
            </summary>
            <returns>Returns true if it was successfully saved.</returns>            
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.Parameter.Delete">
            <summary>
            Deletes an object from the database.
            </summary>
            <returns>Returns true if it was successfully deleted.</returns>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.Parameter.ID">
            <summary>
            Unique item identifier in the database.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.Parameter.Name">
            <summary>
            Parameter unique name.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.Parameter.Value">
            <summary>
            Parameter value.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.Parameter.MemberID">
            <summary>
            Member (creator) unique identifier in the database.
            </summary>        
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.Parameter.Type">
            Parameter type possible values:
            ShortString - string 32 cahrs;
            LongString - string 2048 cahrs;
            SmallInteger - integer number;
            Bool - true or false;
            RadioInteger - integer.
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.Parameter.TypeName">
            <summary>
            Name of type.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.Parameter.TypeSize">
            <summary>
            Type size number.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.Parameter.Created">
            <summary>
            Date of creation.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.Parameter.Modified">
            <summary>
            Date of modification.
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Dictionaries">
            <summary>
            Represents collection dictionaries of labels in different laguages.
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Dictionaries._dictionaries">
            <summary>
            Dictionaries hash table.
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Dictionaries._path">
            <summary>
            Label files current path.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Dictionaries.GetBasePath">
            <summary>
            Gets base path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Dictionaries.#ctor">
            <summary>
            The class constructor.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Dictionaries.Initialize(System.String)">
            <summary>
            Set Label files current path. Must be executed before using. 
            </summary>
            <param name="Path"></param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Dictionaries.RefreshAll">
            <summary>
            Reloads all label files.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Dictionaries.GetAllKeys">
            <summary>
            Gets all language keys which are in the object. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Dictionaries.WordsCountByLanguage(System.String)">
            <summary>
            Gets  total number of labels in a specific dictionary.
            </summary>
            <param name="LanguageID"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Dictionaries.RefreshByLanguage(System.String)">
            <summary>
            Reloads  a dictionary by language key.
            </summary>
            <param name="LanguageID"></param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Dictionaries.GetLabel(System.String)">
            <summary>
            Gets text by label name according to current language.
            </summary>
            <param name="Name"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Dictionaries.GetLabelByLanguage(System.String,System.String)">
            <summary>
            Gets text by label name according to language ID.
            </summary>
            <param name="Name">Label name</param>
            <param name="LanguageID">Languag unique identifier.</param>
            <returns>Text by label name according to language ID.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Dictionaries.GetLabelsByPrefixLanguage(System.String,System.String)">
            <summary>
             Returns text by label prefix according to language ID.
            </summary>
            <param name="Prefix">Label prefix.</param>
            <param name="LanguageID">Language unique identifier.</param>
            <returns></returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Dictionaries.AddFromFlatFile(System.String,System.String,System.String)">
            <summary>
            Loads labels from a file to dictionary collection
            </summary>
            <param name="LanguageID">Language unique identifier.</param>
            <param name="EncodingName">Encodign name.</param>
            <param name="FileName">File name.</param>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Dictionaries.CurrentLanguage">
            <summary>
            Current language.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Dictionaries.DefaultLanguage">
            <summary>
            Default language. It will use if current laguage is not selected. 
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Dictionary">
            <summary>
            Dictionary collection items. It represents set of labels with their text.
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Dictionary._items">
            <summary>
            Label text pair hashtable.
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Dictionary._names">
            <summary>
            Lable names hashtable. 
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Dictionary.WasFileAdded(System.String)">
            <summary>
            Checks if lable file was loaded.
            </summary>
            <param name="FileName">File name/</param>
            <returns>True if the label file was already loaded.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Dictionary.#ctor(System.String,System.String)">
            <summary>
            The class constructor.
            </summary>
            <param name="LanguageID">Language unique identifier.</param>
            <param name="EncodingName">File Encoding name.</param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Dictionary.WordsCount">
            <summary>
            Gets count of words in the dictionary
            </summary>
            <returns></returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Dictionary.Add(SimpleTools.RoleAdmin.Logic.DictionaryItem)">
            <summary>
            Adds item to the dictionary
            </summary>
            <param name="Item">Label text pair object.</param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Dictionary.AddItem(System.String,System.String)">
            <summary>
            Adds item to the dictionary
            </summary>
            <param name="Name">Label name.</param>
            <param name="Text">Label text.</param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Dictionary.GetByPrefix(System.String)">
            <summary>
            Gets the list of dictionary items by label prefix.
            </summary>
            <param name="Prefix">Label prefix.</param>
            <returns>List of dictionary items by label prefix.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Dictionary.Get(System.String)">
            <summary>
            Get text by label name.
            </summary>
            <param name="Name">Label name.</param>
            <returns>Text by label name.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Dictionary.Refresh(System.String)">
            <summary>
            Reloads label file from hard disk.
            </summary>
            <param name="FilePath">Lable file path.</param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Dictionary.Load(System.String,System.String)">
            <summary>
            Loads label file to the dictionary.
            </summary>
            <param name="FilePath">File path.</param>
            <param name="FileName">File name.</param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Dictionary.LoadFromFlatFile(System.String,System.String)">
            <summary>
            Loads label file from hard disk to the dictionary.
            </summary>
            <param name="FilePath">File path.</param>
            <param name="FileName">File name.</param>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Dictionary.Items">
            <summary>
            Label text pair hashtable.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Dictionary.EncodingName">
            <summary>
            File encoding name.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Dictionary.LanguageID">
            <summary>
            Language 
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.DictionaryItem">
            <summary>
            Represents dictionary item which contains pair label name and text.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.DictionaryItem.#ctor(System.String,System.String)">
            <summary>
            The class constructor.
            </summary>
            <param name="Name">Label name.</param>
            <param name="Text">Label text.</param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.DictionaryItem.#ctor">
            <summary>
            The class constructor.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.DictionaryItem.Name">
            <summary>
            Label name.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.DictionaryItem.Text">
            <summary>
            label text. 
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Utilities.Tools">
            <summary>
            represent different metheds to support admin application needs.  
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.Tools.GenerateMachineKey(System.Int32)">
            <summary>
            Creates hexdecimal string representation of MachineKey web.cinfig file setting.
            </summary>
            <param name="bytelength">Key length.</param>
            <returns>Hexdecimal string representation of MachineKey.</returns>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Utilities.Encryptor">
            <summary>
            Generate this 16 characters keys
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.Encryptor.EncryptStringAES(System.String,System.String)">
            <summary>
            Encrypt the given string using AES.  The string can be decrypted using 
            DecryptStringAES().  The sharedSecret parameters must match.
            </summary>
            <param name="plainText">The text to encrypt.</param>
            <param name="sharedSecret">A password used to generate a key for encryption.</param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.Encryptor.DecryptStringAES(System.String,System.String)">
            <summary>
            Decrypt the given string.  Assumes the string was encrypted using 
            EncryptStringAES(), using an identical sharedSecret.
            </summary>
            <param name="cipherText">The text to decrypt.</param>
            <param name="sharedSecret">A password used to generate a key for encryption.</param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.Encryptor.EncodeTo64(System.String)">
            <summary>
            The method create a Base64 encoded string from a normal string.
            </summary>
            <param name="toEncode">The String containing the characters to encode.</param>
            <returns>The Base64 encoded string.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.Encryptor.DecodeFrom64(System.String)">
            <summary>
            The method to Decode your Base64 strings.
            </summary>
            <param name="encodedData">The String containing the characters to decode.</param>
            <returns>A String containing the results of decoding the specified sequence of bytes.</returns>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Utilities.EncryptDecrypt">
            <summary>
            Simple encrypt/decrypt functions 
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.EncryptDecrypt.Encrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Encrypt a byte array into a byte array using a key and an IV  
            </summary>
            <param name="clearData"></param>
            <param name="Key"></param>
            <param name="IV"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.EncryptDecrypt.Encrypt(System.String,System.String)">
            <summary>
            Encrypts a string into a string using a password.
            </summary>
            <param name="clearText"></param>
            <param name="Password"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.EncryptDecrypt.Encrypt(System.Byte[],System.String)">
            <summary>
            Encrypts bytes into bytes using a password.
            </summary>
            <param name="clearData"></param>
            <param name="Password"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.EncryptDecrypt.Encrypt(System.String,System.String,System.String)">
            <summary>
            Encrypts a file into another file using a password.  
            </summary>
            <param name="fileIn"></param>
            <param name="fileOut"></param>
            <param name="Password"></param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.EncryptDecrypt.Decrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Decrypts a byte array into a byte array using a key and an IV.
            </summary>
            <param name="cipherData"></param>
            <param name="Key"></param>
            <param name="IV"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.EncryptDecrypt.Decrypt(System.String,System.String)">
            <summary>
            Decrypts a string into a string using a password  
            </summary>
            <param name="cipherText"></param>
            <param name="Password"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.EncryptDecrypt.Decrypt(System.Byte[],System.String)">
            <summary>
            Decrypts bytes into bytes using a password.
            </summary>
            <param name="cipherData"></param>
            <param name="Password"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.EncryptDecrypt.Decrypt(System.String,System.String,System.String)">
            <summary>
            Decrypts a file into another file using a password. 
            </summary>
            <param name="fileIn"></param>
            <param name="fileOut"></param>
            <param name="Password"></param>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Utilities.TokenType">
            <summary>
            Represents token type class.
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Utilities.Token">
            <summary>
            Represents token class.
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Utilities.StreamTokenizer">
            <summary>
            Represent tream tokenizer class.
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Utilities.CsvParser">
            <summary>
            Represents CSV parser class.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.CsvParser.#ctor(System.IO.Stream)">
            <summary>
            The class constructor.
            </summary>
            <param name="data">Input stream</param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.CsvParser.#ctor(System.String)">
            <summary>
            The class constructor.
            </summary>
            <param name="data">Input string.</param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.CsvParser.GetEnumerator">
            <summary>
            Gets reference to IEnumerator interface. 
            </summary>
            <returns>Reference to IEnumerator interface.</returns>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.DbRoleAdmin">
            <summary>
            Base class for database connection.
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Utilities.DbBase">
            <summary>
            Represents base abstract database connection class which keeps the connection settings
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Utilities.DbBase.CommandTimeout">
            <summary>
            Connection timeout in seconds.
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Utilities.DbBase.ConnectionString">
            <summary>
            Connection string from web.config file. 
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Utilities.DbBase.DatabaseProvider">
            <summary>
            Source database provider. 
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Utilities.DbBase.ThrowExceptionIsOn">
            <summary>
            Throw an exception if something wrong happend inside SQL executor class. Will be removed in next release.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.DbBase.#ctor">
            <summary>
            The class constructor.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.DbRoleAdmin.#ctor">
            <summary>
            The class constructor. It reads connection string value from web.config file. The element name is "SimpleTools.RoleAdmin.Connetion.String".
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.DbRoleAdmin.CurrentProvider">
            <summary>
            Provider type: MSSQL, MySQL.
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Objects.MemberRole">
            <summary>
            Provides a wrapper on single row in the MemberRoles database table. The properties of this class mapped on appropriate database fields and methods provide saving and loading into/from database.
            An instance of this class can be created by new word or loaded from the database using MemberRoles class which returns collection of MemberRole objects by different condition.
            </summary>    
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.MemberRole.#ctor">
            <summary>
            The class constructor.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.MemberRole.#ctor(System.Data.IDataReader)">
            <summary>
            Creates MemberRole object which is base on result set field values.
            </summary>
            <param name="dr">DataReader object which represents current row in the resultset.</param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.MemberRole.Load(System.Data.IDataReader)">
            <summary>
            Loads result set field values and saves into properties of class.
            </summary>
            <param name="dr">DataReader object which represents current row in the resultset.</param>
            <returns>Returns true if it was successfully loaded.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.MemberRole.Save">
            <summary>
            Inserts an object in database according to class properties.
            </summary>
            <returns>Returns true if it was successfully saved.</returns>            
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.MemberRole.Delete">
            <summary>
            Deletes an object from the database.
            </summary>
            <returns>Returns true if it was successfully deleted.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.MemberRole.DeleteAll">
            <summary>
            Deletes all roles from the database which are connected with specific member.
            </summary>
            <returns>Returns true if it was successfully deleted.</returns>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.MemberRole.RoleID">
            <summary>
            Unique item identifier in the database.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.MemberRole.MemberID">
            <summary>
            Member unique identifier in the database.
            </summary>        
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.MemberRole.Created">
            <summary>
            Date of creation.
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Objects.Language">
            <summary>
            Provides a wrapper on single row in the Languages database table. The properties of this class mapped on appropriate database fields and methods provide saving and loading into/from database.
            An instance of this class can be created by new word or loaded from the database using Languages class which returns collection of Language objects by different condition.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.Language.#ctor">
            <summary>
            The class constructor.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.Language.#ctor(System.Data.IDataReader)">
            <summary>
            Creates AuditEvent object which is base on result set field values.
            </summary>
            <param name="dr">DataReader object which represents current row in the resultset.</param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.Language.Load(System.Data.IDataReader)">
            <summary>
            Loads result set field values and saves into properties of class.
            </summary>
            <param name="dr">DataReader object which represents current row in the resultset.</param>
            <returns>Returns true if it was successfully loaded.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.Language.Save">
            <summary>
            Inserts an object in database according to class properties.
            </summary>
            <returns>Returns true if it was successfully saved.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.Language.Delete">
            <summary>
            Deletes an object from the database.
            </summary>
            <returns>Returns true if it was successfully deleted.</returns>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.Language.LanguageID">
            <summary>
            Unique item identifier in the database.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.Language.EnglishName">
            <summary>
            Language name in English.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.Language.NativeName">
            <summary>
            Language name in native words.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.Language.Code">
            <summary>
            Language ISO code.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.Language.IsEnabled">
            <summary>
            Language current status.
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Objects.Role">
            <summary>
            Provides a wrapper on single item in the Roles database table. The properties of this class mapped on appropriate database fields and methods provide saving and loading into/from database.
            An instance of this class can be created by new word or loaded from a database using Roles class which returns collection of Role by different condition.
            </summary>    
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.Role.#ctor">
            <summary>
            The class constructor.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.Role.#ctor(System.Data.IDataReader)">
            <summary>
            Creates Member object which is base on result set field values.
            </summary>
            <param name="dr">DataReader object which represents current row in the resultset.</param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.Role.ContrastColor(System.String)">
            <summary>
            Return text color string which is based on back color. 
            </summary>
            <param name="Name"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.Role.GetReadableForeColor(System.Drawing.Color)">
            <summary>
            Return text color string which is based on back color. 
            </summary>
            <param name="SourecColor">Color object.</param>
            <returns>Color object with inversed color.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.Role.Load(System.Data.IDataReader)">
            <summary>
            Loads result set field values and saves into properties of class.
            </summary>
            <param name="dr">DataReader object which represents current row in the resultset.</param>
            <returns>Returns true if it was successfully loaded.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.Role.Save">
            <summary>
            Inserts or updates an object in database according to class properties.
            </summary>
            <returns>Returns true if it was successfully saved.</returns>            
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.Role.Delete">
            <summary>
            Deletes an object from the database.
            </summary>
            <returns>Returns true if it was successfully deleted</returns>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.Role.RoleID">
            <summary>
            Unique item identifier in the database.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.Role.BackColor">
            <summary>
            Role label back color.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.Role.ForeColor">
            <summary>
            Role label text color.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.Role.Name">
            <summary>
            Role name.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.Role.Settings">
            <summary>
            Role description/settings.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.Role.IsBuiltIn">
            <summary>
            Built-In flag.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.Role.Created">
            <summary>
            Date of creation.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.Role.Modified">
            <summary>
            Date of modification.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.Role.MemberCount">
            <summary>
            Count of role's members.
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Objects.DownloadFileType">
            <summary>
            Type if export/import file
            CSV - comma separated format;
            XLS - MS Excel format'
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Objects.DownloadFileType.CSV">
            <summary>
            comma separated format
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Objects.DownloadFileType.XLS">
            <summary>
            MS Excel format
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Objects.Member">
            <summary>
            Provides a wrapper on single row in the Members database table. The properties of this class mapped on appropriate database fields and methods provide saving and loading into/from database.
            An instance of this class can be created by new word or loaded from the database using Members class which returns collection of Member objects by different condition.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.Member.ComputePasswordHash(System.String)">
            <summary>
            Calculates password hash via custom algorithm in order to secure short passwords.
            </summary>
            <param name="Password">Plain text password.</param>
            <returns>Password hash in hexadecimal format.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.Member.ComputePasswordHashSHA1(System.String)">
            <summary>
            Calculates SHA1 Hash.
            </summary>
            <param name="Password">Plain text password.</param>
            <returns>Password hash in base64 format.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.Member.ComputePasswordHashMD5(System.String)">
            <summary>
            Calculates SHA1 MD5.
            </summary>
            <param name="Password">Plain text password.</param>
            <returns>Password hash in base64 format.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.Member.#ctor">
            <summary>
            The class constructor.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.Member.#ctor(System.Data.SqlClient.SqlDataReader)">
            <summary>
            Creates Member object which is base on result set field values.
            </summary>
            <param name="dr">DataReader object which represents current row in the resultset.</param>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.Member.UpdateLoginTime">
            <summary>
            Updates last login time for a mmeber.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.Member.UpdateAvatar">
            <summary>
            Updates member avatar unique identifier.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.Member.SavePassword">
            <summary>
            Saves member password hash.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.Member.Load(System.Data.IDataReader)">
            <summary>
            Loads result set field values and saves into properties of class.
            </summary>
            <param name="dr">DataReader object which represents current row in the resultset.</param>
            <returns>Returns true if it was successfully loaded.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.Member.UpdateTimeZone">
            <summary>
            Updates member's time zone code.
            </summary>
            <returns>Returns true if it was successfully loaded.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.Member.Save">
            <summary>
            Inserts or updates an object in database according to class properties.
            </summary>
            <returns>Returns true if it was successfully saved.</returns>            
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Objects.Member.Delete">
            <summary>
            Deletes an object from the database.
            </summary>
            <returns>Returns true if it was successfully deleted.</returns>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.Member.Roles">
            <summary>
            Gets list of member's role. 
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.Member.Token">
            <summary>
            Gets member's token which is used for API. 
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.Member.RolesToString">
            <summary>
            Gets "|" separeted string of the member's role list. 
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.Member.MemberID">
            <summary>
            Unique item identifier in the database.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.Member.Name">
            <summary>
            Unique name of member. Can be last/first name or another thing.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.Member.Email">
            <summary>
            Email address of a member.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.Member.Password">
            <summary>
            Member password.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.Member.TimeZoneID">
            <summary>
            Member time zone code
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.Member.Avatar">
            <summary>
            Member avatar unique identifier.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.Member.IsEnable">
            <summary>
            Current status. Will be removed in the future.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.Member.IsBuiltIn">
            <summary>
             Built-in flag.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.Member.LastLogin">
            <summary>
            Date of the last login.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.Member.Created">
            <summary>
            Date of creation.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.Member.Modified">
            <summary>
            Date of modification.
            </summary>
        </member>
        <member name="P:SimpleTools.RoleAdmin.Logic.Objects.Member.ProfileFields">
            <summary>
            Member profile fields collection.
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.BuiltInRoleMember">
            <summary>
            Contains the list of built-in role and member labels.
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.BuiltInRoleMember._Roles">
            <summary>
            The list of of built-in roles.
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.BuiltInRoleMember._Members">
            <summary>
            The list of of built-in members.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.BuiltInRoleMember.#cctor">
            <summary>
            The class constructor.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.BuiltInRoleMember.ContainsRole(System.String)">
            <summary>
            Gets true if a role is  built-in role.
            </summary>
            <param name="Name">Role name</param>
            <returns>True if a role is  built-in role.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.BuiltInRoleMember.ContainsMember(System.String)">
            <summary>
            Gets true if a member is built-in member.
            </summary>
            <param name="Name">member name</param>
            <returns>True if a member is in collection.</returns>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Utilities.DatabaseProvider">
            <summary>
            Database provider which are used for getting data from the database.
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Utilities.DatabaseProvider.MSSQLServer">
            <summary>
            MS SQL Server
            </summary>        
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Utilities.DatabaseProvider.MySQLServer">
            <summary>
            MySQL Server.
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Utilities.DatabaseProvider.ODBCSQLServer">
            <summary>
            Any SQL Server with ODBC rrovider.
            </summary>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Utilities.DBUtil">
            <summary>
            Helps to wrap database result set row to C# object. It has methods which read value from the data REader object put those values
            to C# object with appropriate type.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.DBUtil.#ctor">
            <summary>
            The class constructor.
            </summary>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.DBUtil.GetIntField(System.Data.IDataReader,System.String)">
            <summary>
            Gets Int32 value from database field.
            </summary>
            <param name="dr">DataReader object which represents current resultset row.</param>
            <param name="field">Field name.</param>
            <returns>Integer value or MinValue if it is null in the database.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.DBUtil.GetLongField(System.Data.IDataReader,System.String)">
            <summary>
            Gets Int64 value from database field.
            </summary>
            <param name="dr">DataReader object which represents current resultset row.</param>
            <param name="field">Field name.</param>
            <returns>Long  value or MinValue if it is null in the database.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.DBUtil.GetCharField(System.Data.IDataReader,System.String)">
            <summary>
            Gets string value from database field.
            </summary>
            <param name="dr">DataReader object which represents current resultset row.</param>
            <param name="field">Field name.</param>
            <returns>String value or MinValue if it is null in the database.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.DBUtil.GetBoolField(System.Data.IDataReader,System.String)">
            <summary>
            Gets boolean value from database field.
            </summary>
            <param name="dr">DataReader object which represents current resultset row.</param>
            <param name="field">Field name.</param>
            <returns>Boolean value or MinValue if it is null in the database.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.DBUtil.GetByteField(System.Data.IDataReader,System.String)">
            <summary>
            Gets byte value from database field.
            </summary>
            <param name="dr">DataReader object which represents current resultset row.</param>
            <param name="field">Field name.</param>
            <returns>Byte value or MinValue if it is null in the database.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.DBUtil.GetBinaryField(System.Data.IDataReader,System.String)">
            <summary>
            Gets byte array value from database field.
            </summary>
            <param name="dr">DataReader object which represents current resultset row.</param>
            <param name="field">Field name.</param>
            <returns>Byte array value or MinValue if it is null in the database.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.DBUtil.GetDecimalField(System.Data.IDataReader,System.String)">
            <summary>
            Gets decimal value from database field.
            </summary>
            <param name="dr">DataReader object which represents current resultset row.</param>
            <param name="field">Field name.</param>
            <returns>Decimal value or MinValue if it is null in the database.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.DBUtil.GetDoubleField(System.Data.IDataReader,System.String)">
            <summary>
            Gets double value from database field.
            </summary>
            <param name="dr">DataReader object which represents current resultset row.</param>
            <param name="field">Field name.</param>
            <returns>Double value or MinValue if it is null in the database.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.DBUtil.GetFloatField(System.Data.IDataReader,System.String)">
            <summary>
            Gets float value from database field.
            </summary>
            <param name="dr">DataReader object which represents current resultset row.</param>
            <param name="field">Field name.</param>
            <returns>Float value or MinValue if it is null in the database.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.DBUtil.GetDateTimeField(System.Data.IDataReader,System.String)">
            <summary>
            Gets datime value from database field.
            </summary>
            <param name="dr">DataReader object which represents current resultset row.</param>
            <param name="field">Field name.</param>
            <returns>DateTime value or MinValue if it is null in the database.</returns>
        </member>
        <member name="M:SimpleTools.RoleAdmin.Logic.Utilities.DBUtil.GetSmallIntField(System.Data.IDataReader,System.String)">
            <summary>
            Gets Int16 value from database field.
            </summary>
            <param name="dr">DataReader object which represents current resultset row.</param>
            <param name="field">Field name.</param>
            <returns>Small integer value or MinValue if it is null in the database.</returns>
        </member>
        <member name="T:SimpleTools.RoleAdmin.Logic.Utilities.DbBaseRequestType">
            <summary>
            Represents request type enum.
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Utilities.DbBaseRequestType.ParameterizedSQLText">
            <summary>
            Parameterized SQL statement.
            </summary>
        </member>
        <member name="F:SimpleTools.RoleAdmin.Logic.Utilities.DbBaseRequestType.StoredProcedure">
            <summary>
            Strored procedure.
            </summary>
        </member>
    </members>
</doc>
