@using Web.Admin.Logic.Collections

@{
    var RawFluid = (AppSession.Parameters.AppFluid.Value == "true") ? "row" : "row";
}

<h2>Help</h2>
<p></p>

<p>The DMCS admin portal application uses Single Sign On (SSO).  Single Sign On (SSO) is a term used to indicate when a pool of applications need a centralized authentication, so that users login once and access to any application.</p> 
<p>Implementing a single sign on is quite simple, and can be done by configuring the applications using the web.config file and this tool will help you to create machine key (for validation and encryption/decryption proposes) and manage members (users) and their roles.</p> 
<p>The general concept is this: members are created, activated, possibly approved by admin, roles are assigned to members. Members can self register by and activate their account or admin can to do that.</p> 

<br/>
<h3>Roles</h3><br/>
<p>Member Role tool uses a concept of Roles, designed to give the tool owner the ability to control and define what members can and cannot do. An owner of admin application can manage roles and members and allow access to such functions as creating role, creating members, assigning roles, managing other members.</p>
<p>A Role defines the set of tasks a user is allowed to perform. For instance, the role of Admin encompasses every possible task that can be performed within Member Role application. On the other hand, the Blocked role prevents to sing-in or execute any another action.</p>
<p>Each role is given names that highlight the core functional responsibilities of the role and each role has own color, name and settings properties. The settings property is used to keep text information which can be used as configuration string for different purposes by third party applications.</p>

<p>Summary of Roles</p>
<ul style="display:inline-block">
    <li>Admins - People who care about role and member management</li>
    <li>Blocked	 - Blocked members for some reason</li>
    <li>Self Registered	 - Members which registered independently via public UI</li>
    <li>Not Activated - Members which are not activated using notification email</li>
    <li>API Members - Members which use API for some purposes</li>
    <li>Self Activated - Members which activated their accounts</li>
</ul>
<ul style="display:inline-block;vertical-align:top">
    <li>A-SocialSignIn: Members which signed in via Social Networks</li>
    <li>Twitter:  Members which signed in via Twitter</li>
    <li>Facebook:  Members which signed in via Facebook</li>
    <li>Google: Members which signed in via Google</li>
    <li>Yahoo:  Members which signed in via Yahoo</li>
    <li>Live Journal:  Members which signed in via Live Journal</li>
    <li>Blogger:  Members which signed in via Blogger</li>
    <li>OpenID:  Members which signed in via OpenID</li>
    <li>My OpenID:  Members which signed in via myOpenID</li>
</ul>

<p>The role names are self speaking and the meaning is pretty clear. You can add new role and use it according to your needs. Unnecessary self-made role can be deleted if there are no users whom such role is assigned. Role assigned every new created user by default can be changed by you. </p>

<br/>
<h3>Members</h3><br/>
<p>An authentication and authorization is a key requirement for many web applications which you want to develop. In order to do that a member (user) should have unique e-mail and password. This area allows creating and managing members. You can create, delete, assign a role to a member, or remove members from the role and control a member action by audit log.</p>
<p>The application allows you to create API token which gives a possibility to use application functionality in other applications which need authentication and authorization.</p>
<p>You have a possibility to export/import members via CSV file. The format of the export file is very easy to understand and will be described on FAQ page.</p>

<br/>
<h3>Fields</h3><br/>
<p>This area provides an ability to create additional fields which keeps additional information about a member like country, city, address etc. You have the posibility to group the fields and define their type: it can be simple string or collection of values. The next release will have more types like date, date range, multiple selection collection etc. Any field can be included to sign up form.</p>


<br/>
<h3>Domains</h3><br/>
<p>
 This page contains the list of available domains, so you can use it to restrict profile fields visibility by domains.  If you created a profile fields it will be visible for all domains by default. To change that click on the field name on the Fields page and click on "Restricted By Domains" or "Restricted By Roles" tab and check domains or roles which you need.
 You can select a member domain on the member edit dialog or it will be assigned during sign up process. The domain name will be set for a member during signup process or you can find the member on the Members page, click on the member name and set the memeber domain on the Domains tab.
 </p>


<br/>
<h3>Audit</h3><br/> 
<p>This area provides an ability to track what happens for admin application. The application support the following type of audit events: System, Application, API.</p>

<ul>
<li>System - describes application unhandled exception,  and other system staff;</li>
<li>Application - describes the application function result (member and role creation, sign in/ sign out etc.) or action comment;</li>
<li>API - describes API method execution result or comment.</li>
</ul>
<p>You have an ability to use this feature or switch it off.  The audit log allows analyzing different type of events and provides extra information like a query string, request parameters, cookies, exception message and detail etc.</p>
<p>The last audit event will be always on top of event list. Each row will be collapsed if event description contains more than 80 words. Some rows will have the detail link which provides extra information about events.</p>


<br/>
<h3>Tools</h3><br/>
<p>This area contains a set of simple tools. Actually, at the moment, the application has only one item in this area but this item is very useful.  It is a Machine Key Generator.</p>
<p>The generator allows generating random keys for validation and encryption/decryption of the view state (and other purposes). It builds a <machineKey> element which you need to include in your web.config file. The tool creates a 256-bit decryption key and a 512-bit validation key, with Rijndael as the data validation algorithm. Once the keys are generated, they are converted into a string of hexadecimal characters.</p>



<br/>
<h3>Settings</h3><br/>

<div class="@RawFluid">
    <div class="col-md-4">
      <h4>General</h4><br/>
        <ul>
            <li>Admin Email: The emails address of site admin;</li>
            <li>Application Path: Application's absolute path;</li>
            <li>Domain Name: The name of domain;</li>
            <li>Auth Cookie Name: Name of cookie which will use for the authentication;</li>
            <li>Audit: Enable audit functionality;</li>
            <li>Secret Admin URL: Admin UI virtual path</li>
            <li>Maintenance Time URL: Local or external path of maintenance page</li>
            <li>Maintenance Time: Switch to the maintenance mode</li>
        </ul>	    
    </div>
    <div class="col-md-4">
      <h4>User Interface</h4><br/>
        <ul>
            <li>Application Name: The name of the application</li>
            <li>Default Paging Size: The default page size for all grids</li>
        </ul>
        <h4>API</h4><br/>
       <ul>
            <li>Enables API support.</li>
            <li>Secret URL: The URL which will be used for API method execution.</li>
       </ul>
    </div>
    <div class="col-md-4">
      <h4>Outgoing Mail Server</h4><br/>
        <ul>
        <li>SMTP Host: SMTP server host used for sending emails (e.g. smtp.domainname.com)
        <li>SMTP User Name: SMTP server user name used for sending emails
        <li>SMTP User Email: The user email for SMTP account used for sending emails
        <li>SMTP Password: The password for the SMTP account used for sending emails
        <li>SMTP Port: The port for SMTP server used for sending emails
        <li>SSL: Enable SSL connection between application and mail server.
        </ul>
    </div>
</div>

<div class="@RawFluid">
    <div class="col-md-4">
      <h4>Registration</h4><br/>
        <ul>
        <li>Self-Registration: Enables self-registration functionality.</li>
        <li>Self-Activation: Enables self-activation functionality.</li>
        <li>Reset Password: Enables reset password functionality.</li>
        <li>Self-Registration Roles: Add member to roles after self-registration</li>
        <li>Self-Activation Roles: Add member to roles after self-activation</li>
        </ul>
    </div>
    <div class="col-md-4">
      <h4>Themes</h4><br/>
        <ul>
            <li>You can change the application look by selecting another skin.</li>
        </ul>
      <h4>Languages</h4><br/>
        <ul>
            <li>Public UI language: Default language for Sign In, Sign Out forms</li>
            <li>Reload label files: Reload all label files and load new if exist</li>
        </ul>
    </div>
    <div class="col-md-4"><br/>
    </div>
</div>
	

<div class="@RawFluid">
    <div class="col-md-12">
      <h4>Rules</h4><br/>
        <ul>
        <li>Redirect After Sign In: Redirect members to this URL after sign in if no back link</li>
        <li>Redirect After Sign Out: Redirect members to this URL after sign out if no back link</li>
        <li>Mail Domains: Restricted mail domain list with options:
		         Allow All (Excluding from the list)
		         Deny All (Excluding from the list)</li>
        <li>Blind Carbon Copy (Bcc): This is a copy of an email message sent to a recipient whose email address does not appear in the message. Action: registration, activation, changing password.</li>
        <li>Add member to role if password failed: Assign role to a member if password was failed n-times. You can use built in role Blocked or use your custom role in order to be self informed.</li>
        <li>And redirect to: Redirects to URL if account was blocked</li>
        </ul>
    </div>
</div>
<br/>
<div class="@RawFluid">
    <div class="col-md-12">
      <h4>Social Networks</h4><br/>
       <h4>Twitter</h4>
         You need to register your application with Twitter. That means you should have your production URL ready before you think to start your development. When you finished with registration, you will receive consumer key and consumer secret. These unique credentials will help your app to interact with Twitter. No big deal. You can visit your all registered applications on <a href="http://twitter.com/oauth">http://twitter.com/oauth.</a> And to register for new app you need to visit <a href="http://twitter.com/apps/new">http://twitter.com/apps/new</a>.<br/><br/>
         <h4>Facebook</h4>
         It is recommended that users be able to authenticate with Facebook when using Socialize so as to maximize the exposure and promotion of your app. First step for Facebook is retrieve the App ID and App Secret (it is based on oAuth 2.0), so register you application on <a href="https://developers.facebook.com/apps">https://developers.facebook.com/apps</a>.<br/><br/>The Facebook/Twitter API token are saved in the database (and updated after expiration date), so you can use that to have an access to Facebook/Twitter API.<br/><br/>
         <h4> Google, Yahoo and other OpenID providers</h4>
     You don't need any key for those providers, so just enable or disable the possibilities.
    </div>
</div>

<br/><br/>
<div class="@RawFluid">
    <div class="col-md-12">
      <h4>LDAP (Active Directory)</h4><br/>
      You can use LDAP directory to authenticate members. It can be mixed mode (LDAP + admin database will be used in the same time) or LDAP only mode. A member will be added to the admin tool database automagically if authentication was fine. You have a possibility to add a member's group to the admin tool database as role by "Add group as role" option.<br/><br/>
      When connecting to AD you can use "serverless" binding or you can specify a serverbound<br/>to use everytime (server bound). Here's an example of using both:<br/><br/>
      <table class="table table-striped table-bordered table-condensed" style="width:55% !important">
          <tr><td><b>Type</b></td><td><b>URL Example</b></td></tr>
          <tr><td>Serverless</td><td>LDAP://dc=domainname,dc=com</td></tr>
          <tr><td>Serverbound</td><td>LDAP://domainControllerName/dc=domainName,dc=com </td></tr>
      </table>
    </div>
</div>

<br/>
<h3>API</h3><br/>

<p>In simpler terms, an API refers to a set of functions built into an application, which can be used by other applications (or by itself), to interact with the application. An API is a great way to expose an application’s functionality to external applications safely and securely, since all functionality that these external applications can do is limited with what functionality is exposed in the API.</p>
<p>For example, if you were to log in a member, you would send his credentials to the API, and the API would return to you a result saying if the user provided the correct user-password combination.</p>
<p>In order to access the API, you need two pieces of information. The first is a member email which is a unique code that we use to identify your account. The other is an API Token which acts as a password when you connect to the API. You can get both of those here. "Generate a new API Token" to display it. You'll need to remember both of those later when you start writing code</p>

<h4>API Methods<h3><br/></h4>
<div class="@RawFluid">
    <div class="col-md-4">
    <h4>Role Collection</h4>
    <ul>
		<li>GetRoles</li>
		<li>GetMemberRoles</li>
		<li>GetMemberRoles</li>
    </ul>
    </div>
    <div class="col-md-4">
    <h4>Member Collection</h4>
    <ul>
		<li>GetMembers</li>
		<li>AssignRoles</li>
		<li>UnAssignRoles</li>
    </ul>
    </div>
    <div class="col-md-4">
    <h4>AuditEvents & AuditEventDatails</h4>
    <ul>
	    <li>GetEvents</li>
	    <li>GetEventDatails</li>
    </ul>
    </div>
</div>

@{Html.RenderPartial(@"~/Views/Settings/_IPRestrictions.cshtml");}

<br/>
<h3>Miscellaneous</h3><br/>
<p>Please, read articles bellow: </p>
<a href="http://www.codeproject.com/Articles/6586/Single-sign-on-across-multiple-applications-in-ASP">Single sign-on across multiple applications in ASP.NET</a><br>
<a href="http://www.codeproject.com/Articles/27576/Single-Sign-on-in-ASP-NET-and-Other-Platforms">Single Sign-on in ASP.NET and Other Platforms - How To Generate Key</a><br>
<a href="http://www.codeproject.com/Articles/106439/Single-Sign-On-SSO-for-cross-domain-ASP-NET-applic">Single Sign On (SSO) for cross-domain ASP.NET applications: Part-I - The design blue print</a><br>
<a href="http://www.codeproject.com/Articles/114484/Single-Sign-On-SSO-for-cross-domain-ASP-NET-applic">Single Sign On (SSO) for cross-domain ASP.NET applications: Part-II - The implementation</a><br>